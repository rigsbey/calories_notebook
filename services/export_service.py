import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import io
import csv
from services.firebase_service import FirebaseService
from services.personal_goals_service import PersonalGoalsService
from services.subscription_service import SubscriptionService

logger = logging.getLogger(__name__)

class ExportService:
    def __init__(self):
        self.firebase_service = FirebaseService()
        self.personal_goals_service = PersonalGoalsService()
        self.subscription_service = SubscriptionService()

    async def can_use_export(self, user_id: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        try:
            subscription = await self.subscription_service.get_user_subscription(user_id)
            subscription_type = subscription.get('type', 'lite')
            
            if subscription_type == 'lite':
                return False, "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ Pro"
            
            return True, ""
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"

    async def generate_csv_report(self, user_id: int, days: int = 7) -> Optional[io.StringIO]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days)
            
            analyses = await self.firebase_service.get_weekly_analyses(
                user_id, start_date.strftime('%Y-%m-%d')
            )
            
            if not analyses:
                return None
            
            # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
            output = io.StringIO()
            writer = csv.writer(output)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                '–î–∞—Ç–∞', '–í—Ä–µ–º—è', '–í–µ—Å (–≥)', '–ö–∞–ª–æ—Ä–∏–∏', '–ë–µ–ª–∫–∏ (–≥)', 
                '–ñ–∏—Ä—ã (–≥)', '–£–≥–ª–µ–≤–æ–¥—ã (–≥)', '–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞'
            ]
            writer.writerow(headers)
            
            # –î–∞–Ω–Ω—ã–µ
            for analysis in analyses:
                nutrition = self.firebase_service.parse_nutrition_data(
                    analysis.get('analysis_text', '')
                )
                
                timestamp = analysis.get('timestamp', datetime.now())
                if isinstance(timestamp, str):
                    timestamp = datetime.fromisoformat(timestamp)
                
                row = [
                    timestamp.strftime('%Y-%m-%d'),
                    timestamp.strftime('%H:%M:%S'),
                    analysis.get('weight', ''),
                    nutrition.get('calories', 0),
                    nutrition.get('proteins', 0),
                    nutrition.get('fats', 0),
                    nutrition.get('carbs', 0),
                    analysis.get('analysis_text', '').replace('\n', ' ').replace('\r', ' ')
                ]
                writer.writerow(row)
            
            output.seek(0)
            return output
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV –æ—Ç—á–µ—Ç–∞: {e}")
            return None

    async def generate_pdf_report(self, user_id: int, days: int = 7) -> Optional[bytes]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML-—à–∞–±–ª–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ PDF
            html_content = await self._generate_html_report(user_id, days)
            
            if not html_content:
                return None
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ HTML –≤ PDF
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è wkhtmltopdf –∏–ª–∏ reportlab
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HTML –∫–∞–∫ bytes –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return html_content.encode('utf-8')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–∞: {e}")
            return None

    async def _generate_html_report(self, user_id: int, days: int) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –æ—Ç—á–µ—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await self.firebase_service.get_user_info(user_id)
            user_display = self._get_user_display_name(user_data, user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            goal = await self.personal_goals_service.get_user_goal(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days)
            
            analyses = await self.firebase_service.get_weekly_analyses(
                user_id, start_date.strftime('%Y-%m-%d')
            )
            
            if not analyses:
                return None
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            total_nutrition = await self.firebase_service.aggregate_daily_nutrition(analyses)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            avg_calories = total_nutrition['calories'] / days
            avg_proteins = total_nutrition['proteins'] / days
            avg_fats = total_nutrition['fats'] / days
            avg_carbs = total_nutrition['carbs'] / days
            
            # HTML —à–∞–±–ª–æ–Ω
            html = f"""
            <!DOCTYPE html>
            <html lang="ru">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>–û—Ç—á–µ—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏ - {user_display}</title>
                <style>
                    body {{
                        font-family: Arial, sans-serif;
                        margin: 20px;
                        background-color: #f5f5f5;
                    }}
                    .container {{
                        max-width: 800px;
                        margin: 0 auto;
                        background-color: white;
                        padding: 30px;
                        border-radius: 10px;
                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    }}
                    .header {{
                        text-align: center;
                        border-bottom: 2px solid #4CAF50;
                        padding-bottom: 20px;
                        margin-bottom: 30px;
                    }}
                    .header h1 {{
                        color: #4CAF50;
                        margin: 0;
                    }}
                    .info {{
                        display: grid;
                        grid-template-columns: 1fr 1fr;
                        gap: 20px;
                        margin-bottom: 30px;
                    }}
                    .info-item {{
                        background-color: #f9f9f9;
                        padding: 15px;
                        border-radius: 5px;
                    }}
                    .info-item h3 {{
                        margin: 0 0 10px 0;
                        color: #333;
                    }}
                    .nutrition {{
                        display: grid;
                        grid-template-columns: repeat(2, 1fr);
                        gap: 20px;
                        margin-bottom: 30px;
                    }}
                    .nutrition-item {{
                        background-color: #e8f5e8;
                        padding: 15px;
                        border-radius: 5px;
                        text-align: center;
                    }}
                    .nutrition-item h3 {{
                        margin: 0 0 10px 0;
                        color: #4CAF50;
                    }}
                    .nutrition-value {{
                        font-size: 24px;
                        font-weight: bold;
                        color: #2e7d32;
                    }}
                    .vitamins {{
                        margin-bottom: 30px;
                    }}
                    .vitamins h3 {{
                        color: #4CAF50;
                        border-bottom: 1px solid #4CAF50;
                        padding-bottom: 10px;
                    }}
                    .vitamin-list {{
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                        gap: 10px;
                    }}
                    .vitamin-item {{
                        background-color: #fff3e0;
                        padding: 10px;
                        border-radius: 5px;
                        text-align: center;
                    }}
                    .footer {{
                        text-align: center;
                        color: #666;
                        font-size: 12px;
                        border-top: 1px solid #ddd;
                        padding-top: 20px;
                    }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üìä –û—Ç—á–µ—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏</h1>
                        <p>–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}</p>
                    </div>
                    
                    <div class="info">
                        <div class="info-item">
                            <h3>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</h3>
                            <p>{user_display}</p>
                        </div>
                        <div class="info-item">
                            <h3>üìÖ –ü–µ—Ä–∏–æ–¥</h3>
                            <p>{days} –¥–Ω–µ–π</p>
                        </div>
                    </div>
            """
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏
            if goal:
                goal_type_names = {
                    "weight_loss": "üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ",
                    "weight_gain": "üìà –ù–∞–±–æ—Ä –≤–µ—Å–∞", 
                    "maintenance": "‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞",
                    "muscle_gain": "üí™ –ù–∞–±–æ—Ä –º—ã—à—Ü",
                    "health_improvement": "üè• –£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"
                }
                goal_name = goal_type_names.get(goal['goal_type'], goal['goal_type'])
                daily_target = goal.get('daily_calories', 2000)
                
                html += f"""
                    <div class="info">
                        <div class="info-item">
                            <h3>üéØ –¶–µ–ª—å</h3>
                            <p>{goal_name}</p>
                        </div>
                        <div class="info-item">
                            <h3>üìä –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞</h3>
                            <p>{daily_target} –∫–∫–∞–ª</p>
                        </div>
                    </div>
                """
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏
            html += f"""
                    <div class="nutrition">
                        <div class="nutrition-item">
                            <h3>üî• –ö–∞–ª–æ—Ä–∏–∏</h3>
                            <div class="nutrition-value">{avg_calories:.0f}</div>
                            <p>–∫–∫–∞–ª/–¥–µ–Ω—å</p>
                        </div>
                        <div class="nutrition-item">
                            <h3>ü•© –ë–µ–ª–∫–∏</h3>
                            <div class="nutrition-value">{avg_proteins:.1f}</div>
                            <p>–≥/–¥–µ–Ω—å</p>
                        </div>
                        <div class="nutrition-item">
                            <h3>ü•ë –ñ–∏—Ä—ã</h3>
                            <div class="nutrition-value">{avg_fats:.1f}</div>
                            <p>–≥/–¥–µ–Ω—å</p>
                        </div>
                        <div class="nutrition-item">
                            <h3>üåæ –£–≥–ª–µ–≤–æ–¥—ã</h3>
                            <div class="nutrition-value">{avg_carbs:.1f}</div>
                            <p>–≥/–¥–µ–Ω—å</p>
                        </div>
                    </div>
            """
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏—Ç–∞–º–∏–Ω—ã
            if total_nutrition['vitamins']:
                html += """
                    <div class="vitamins">
                        <h3>üíä –í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã</h3>
                        <div class="vitamin-list">
                """
                
                for vitamin, percentage in total_nutrition['vitamins'].items():
                    html += f"""
                            <div class="vitamin-item">
                                <strong>{vitamin}</strong><br>
                                {percentage}%
                            </div>
                    """
                
                html += """
                        </div>
                    </div>
                """
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            html += f"""
                    <div class="info">
                        <div class="info-item">
                            <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                            <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {len(analyses)}</p>
                            <p>–°—Ä–µ–¥–Ω–µ –≤ –¥–µ–Ω—å: {len(analyses)/days:.1f}</p>
                        </div>
                        <div class="info-item">
                            <h3>üìà –ü—Ä–æ–≥—Ä–µ—Å—Å</h3>
                            <p>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
                        </div>
                    </div>
                    
                    <div class="footer">
                        <p>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –±–æ—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è</p>
                        <p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /recommendations</p>
                    </div>
                </div>
            </body>
            </html>
            """
            
            return html
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á–µ—Ç–∞: {e}")
            return None

    def _get_user_display_name(self, user_info: Dict, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user_info:
            return f"ID: {user_id}"
        
        if user_info.get('username'):
            return f"@{user_info['username']}"
        elif user_info.get('first_name'):
            name = user_info['first_name']
            if user_info.get('last_name'):
                name += f" {user_info['last_name']}"
            return name
        else:
            return f"ID: {user_id}"

    async def generate_shareable_link(self, user_id: int, report_type: str = "weekly") -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –æ—Ç—á–µ—Ç–∞"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
            # –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ –æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            
            report_id = f"{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è:
            # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
            # 2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (S3, Google Drive, etc.)
            # 3. –°–æ–∑–¥–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
            
            # –ó–∞–≥–ª—É—à–∫–∞
            shareable_link = f"https://calories.toxiguard.site/reports/{report_id}"
            
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞: {shareable_link}")
            return shareable_link
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞: {e}")
            return None

    async def get_export_options(self, user_id: int) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        try:
            can_export, message = await self.can_use_export(user_id)
            
            if not can_export:
                return {
                    "available": False,
                    "message": message,
                    "options": []
                }
            
            return {
                "available": True,
                "message": "",
                "options": [
                    {
                        "type": "csv",
                        "name": "CSV —Ñ–∞–π–ª",
                        "description": "–¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥",
                        "icon": "üìä"
                    },
                    {
                        "type": "pdf",
                        "name": "PDF –æ—Ç—á–µ—Ç",
                        "description": "–ö—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏",
                        "icon": "üìÑ"
                    },
                    {
                        "type": "share",
                        "name": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                        "description": "–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ä–∞—á—É/—Ç—Ä–µ–Ω–µ—Ä—É",
                        "icon": "üîó"
                    }
                ]
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return {
                "available": False,
                "message": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞",
                "options": []
            }
