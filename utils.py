import os
import logging
from datetime import datetime
from functools import wraps
from typing import Callable, Any

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ª–æ–≥–æ–≤
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    date_format = '%Y-%m-%d %H:%M:%S'
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å (–±–µ–∑ —Ñ–∞–π–ª–∞)
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        datefmt=date_format,
        handlers=[
            logging.StreamHandler()  # –¢–æ–ª—å–∫–æ –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        ]
    )
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('aiogram').setLevel(logging.WARNING)
    logging.getLogger('httpx').setLevel(logging.WARNING)

def error_handler(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö"""
    @wraps(func)
    async def wrapper(*args, **kwargs) -> Any:
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logger = logging.getLogger(func.__module__)
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}: {e}", exc_info=True)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å message –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            for arg in args:
                if hasattr(arg, 'answer'):  # –≠—Ç–æ –æ–±—ä–µ–∫—Ç Message
                    await arg.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                    break
    return wrapper

def clean_temp_files(directory: str, max_age_hours: int = 24):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    logger = logging.getLogger(__name__)
    
    if not os.path.exists(directory):
        return
    
    current_time = datetime.now().timestamp()
    cleaned_count = 0
    
    try:
        for filename in os.listdir(directory):
            file_path = os.path.join(directory, filename)
            
            if os.path.isfile(file_path):
                file_age = current_time - os.path.getctime(file_path)
                if file_age > max_age_hours * 3600:  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                    os.remove(file_path)
                    cleaned_count += 1
        
        if cleaned_count > 0:
            logger.info(f"–û—á–∏—â–µ–Ω–æ {cleaned_count} —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

def create_vitamin_bar(percentage: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤–∏—Ç–∞–º–∏–Ω–∞"""
    if percentage <= 0:
        return "‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú"
    elif percentage >= 100:
        return "üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10 –±–ª–æ–∫–æ–≤)
    filled_blocks = int((percentage / 100) * 10)
    empty_blocks = 10 - filled_blocks
    
    return "üü©" * filled_blocks + "‚¨ú" * empty_blocks

def get_vitamin_emoji(vitamin_name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏—Ç–∞–º–∏–Ω–∞ –∏–ª–∏ –º–∏–Ω–µ—Ä–∞–ª–∞"""
    vitamin_emojis = {
        '–≤–∏—Ç–∞–º–∏–Ω c': 'üçä',
        '–≤–∏—Ç–∞–º–∏–Ω a': 'ü•ï', 
        '–≤–∏—Ç–∞–º–∏–Ω k': 'üåø',
        '–≤–∏—Ç–∞–º–∏–Ω e': 'üå∞',
        '–≤–∏—Ç–∞–º–∏–Ω d': '‚òÄÔ∏è',
        '–≤–∏—Ç–∞–º–∏–Ω b12': 'ü•©',
        '–≤–∏—Ç–∞–º–∏–Ω b6': 'üêü',
        '—Ñ–æ–ª–∏–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞': 'ü•¨',
        '–∫–∞–ª–∏–π': 'üçå',
        '–∫–∞–ª—å—Ü–∏–π': 'ü•õ',
        '–º–∞–≥–Ω–∏–π': 'üå∞',
        '–∂–µ–ª–µ–∑–æ': 'ü•©',
        '—Ü–∏–Ω–∫': 'ü¶™',
        '—Ñ–æ—Å—Ñ–æ—Ä': 'üêü',
        '–Ω–∞—Ç—Ä–∏–π': 'üßÇ',
        '–º–∞—Ä–≥–∞–Ω–µ—Ü': 'üå±'
    }
    
    vitamin_lower = vitamin_name.lower()
    for key, emoji in vitamin_emojis.items():
        if key in vitamin_lower:
            return emoji
    
    return 'üíä'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

def format_vitamins_section(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª –≤–∏—Ç–∞–º–∏–Ω–æ–≤ —Å –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–æ–π"""
    lines = text.split('\n')
    formatted_lines = []
    
    in_vitamins_section = False
    vitamin_lines = []  # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    for line in lines:
        if '–í–ò–¢–ê–ú–ò–ù–´ –ò –ú–ò–ù–ï–†–ê–õ–´' in line.upper():
            formatted_lines.append("üìä –í–ò–¢–ê–ú–ò–ù–´ –ò –ú–ò–ù–ï–†–ê–õ–´ (% –æ—Ç –Ω–æ—Ä–º—ã)")
            formatted_lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
            in_vitamins_section = True
            continue
        
        if in_vitamins_section and line.strip().startswith('-'):
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤–∏—Ç–∞–º–∏–Ω–∞
            import re
            match = re.search(r'- ([^:]+):\s*(\d+)%', line)
            if match:
                vitamin_name = match.group(1).strip()
                percentage = int(match.group(2))
                
                emoji = get_vitamin_emoji(vitamin_name)
                bar = create_vitamin_bar(percentage)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                vitamin_lines.append((emoji, vitamin_name, bar, percentage))
                continue
        
        # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –≤–∏—Ç–∞–º–∏–Ω–æ–≤
        if in_vitamins_section and line.strip() and not line.strip().startswith('-'):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–∏—Ç–∞–º–∏–Ω—ã –≤ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–º –±–ª–æ–∫–µ —Å —ç–º–æ–¥–∑–∏
            if vitamin_lines:
                formatted_lines.append("```")
                for emoji, name, bar, percent in vitamin_lines:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∏—Ç–∞–º–∏–Ω—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    formatted_lines.append(f"{emoji} {name}: {bar} {percent}%")
                formatted_lines.append("```")
                formatted_lines.append("")
                vitamin_lines = []
            
            in_vitamins_section = False
        
        formatted_lines.append(line)
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –≤–∏—Ç–∞–º–∏–Ω–æ–≤
    if vitamin_lines:
        formatted_lines.append("```")
        for emoji, name, bar, percent in vitamin_lines:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∏—Ç–∞–º–∏–Ω—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            formatted_lines.append(f"{emoji} {name}: {bar} {percent}%")
        formatted_lines.append("```")
    
    return '\n'.join(formatted_lines)

def format_nutrition_info(analysis_text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not analysis_text:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–∞–Ω–∏–∏"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
    formatted = analysis_text
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ —ç–º–æ–¥–∑–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
    replacements = {
        '–ö–∞–ª–æ—Ä–∏–∏:': 'üî• –ö–∞–ª–æ—Ä–∏–∏:',
        '–ë–µ–ª–∫–∏:': 'ü•© –ë–µ–ª–∫–∏:',
        '–ñ–∏—Ä—ã:': 'ü•ë –ñ–∏—Ä—ã:',
        '–£–≥–ª–µ–≤–æ–¥—ã:': 'üçû –£–≥–ª–µ–≤–æ–¥—ã:',
        '–ü–†–û–î–£–ö–¢–´:': 'üçΩÔ∏è –ü–†–û–î–£–ö–¢–´:',
        '–ü–ò–©–ï–í–ê–Ø –¶–ï–ù–ù–û–°–¢–¨': '\nüìä –ü–ò–©–ï–í–ê–Ø –¶–ï–ù–ù–û–°–¢–¨',  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        '–ü–†–ò–ú–ï–†–ù–´–ô –í–ï–°:': '‚öñÔ∏è –ü–†–ò–ú–ï–†–ù–´–ô –í–ï–°:'
    }
    
    for old, new in replacements.items():
        formatted = formatted.replace(old, new)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª –≤–∏—Ç–∞–º–∏–Ω–æ–≤ —Å –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–æ–π
    formatted = format_vitamins_section(formatted)
    
    return formatted

def extract_meal_title(analysis_text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞."""
    try:
        text = analysis_text or ""
        lines = [l.strip() for l in text.split('\n') if l.strip()]
        if not lines:
            return "–ü—Ä–∏–µ–º –ø–∏—â–∏"
        
        # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        for i, line in enumerate(lines):
            if '–ü–†–û–î–£–ö–¢–´' in line.upper():
                # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ "–ü–†–û–î–£–ö–¢–´"
                if i + 1 < len(lines):
                    products_line = lines[i + 1]
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                    products = _extract_main_products(products_line)
                    if products:
                        return products
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã, –∏—â–µ–º –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        first_line = lines[0]
        if len(first_line) > 10:  # –ù–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞
            return _extract_main_products(first_line) or "–ü—Ä–∏–µ–º –ø–∏—â–∏"
        
        return "–ü—Ä–∏–µ–º –ø–∏—â–∏"
    except Exception:
        return "–ü—Ä–∏–µ–º –ø–∏—â–∏"

def _extract_main_products(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    text = text.lower()
    
    # –°–ª–æ–≤–∞—Ä—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products = {
        '–∫—Ä–µ–∫–µ—Ä—ã': '–ö—Ä–µ–∫–µ—Ä—ã',
        '—Ö–ª–µ–±': '–•–ª–µ–±', 
        '—Å–∞–ª–∞—Ç': '–°–∞–ª–∞—Ç',
        '—Å—É–ø': '–°—É–ø',
        '–ø–∞—Å—Ç–∞': '–ü–∞—Å—Ç–∞',
        '–º–∞–∫–∞—Ä–æ–Ω—ã': '–ú–∞–∫–∞—Ä–æ–Ω—ã',
        '—Ä–∏—Å': '–†–∏—Å',
        '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å': '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å',
        '–∫—É—Ä–∏—Ü–∞': '–ö—É—Ä–∏—Ü–∞',
        '–º—è—Å–æ': '–ú—è—Å–æ',
        '—Ä—ã–±–∞': '–†—ã–±–∞',
        '—è–π—Ü–∞': '–Ø–π—Ü–∞',
        '—Å—ã—Ä': '–°—ã—Ä',
        '–π–æ–≥—É—Ä—Ç': '–ô–æ–≥—É—Ä—Ç',
        '—Ç–≤–æ—Ä–æ–≥': '–¢–≤–æ—Ä–æ–≥',
        '—Ñ—Ä—É–∫—Ç—ã': '–§—Ä—É–∫—Ç—ã',
        '–æ–≤–æ—â–∏': '–û–≤–æ—â–∏',
        '–∫–∞—à–∞': '–ö–∞—à–∞',
        '–æ–º–ª–µ—Ç': '–û–º–ª–µ—Ç',
        '–±—É—Ç–µ—Ä–±—Ä–æ–¥': '–ë—É—Ç–µ—Ä–±—Ä–æ–¥',
        '–ø–∏—Ü—Ü–∞': '–ü–∏—Ü—Ü–∞',
        '–±—É—Ä–≥–µ—Ä': '–ë—É—Ä–≥–µ—Ä',
        '—Å—ç–Ω–¥–≤–∏—á': '–°—ç–Ω–¥–≤–∏—á',
        '–º–∞–º–∞–ª—ã–≥–∞': '–ú–∞–º–∞–ª—ã–≥–∞',
        '–ø–æ–º–∏–¥–æ—Ä—ã': '–ü–æ–º–∏–¥–æ—Ä—ã',
        '–º–∞—Å–ª–æ': '–ú–∞—Å–ª–æ',
        '–ø–µ—Ç—Ä—É—à–∫–∞': '–ü–µ—Ç—Ä—É—à–∫–∞'
    }
    
    # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    found_products = []
    for key, value in products.items():
        if key in text:
            found_products.append(value)
    
    if found_products:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ 2 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        return ', '.join(found_products[:2])
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ (–Ω–æ –Ω–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ)
    words = text.split()
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞
    filtered_words = []
    skip_words = {
        '–ø—Ä–∏–º–µ—Ä–Ω—ã–π', '–≤–µ—Å', '–≥', '–Ω–∞', '—Ñ–æ—Ç–æ', '–Ω–µ', '–∑–Ω–∞—é', '–≥—Ä–∞–º–º–æ–≤–∫—É', '–∞–Ω–∞–ª–∏–∑', '–∑–∞–≤–µ—Ä—à–µ–Ω',
        '–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π', '–∞–Ω–∞–ª–∏–∑', '–ø—Ä–æ–¥—É–∫—Ç—ã', '–ø–∏—â–µ–≤–∞—è', '—Ü–µ–Ω–Ω–æ—Å—Ç—å', '–≤–∏—Ç–∞–º–∏–Ω—ã', '–º–∏–Ω–µ—Ä–∞–ª—ã',
        '–Ω–æ—Ä–º—ã', '–∫–∞–ª–æ—Ä–∏–∏', '–±–µ–ª–∫–∏', '–∂–∏—Ä—ã', '—É–≥–ª–µ–≤–æ–¥—ã', '–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–∞—è', '–≤–æ–¥–µ', '–≤–æ–∑–º–æ–∂–Ω–æ',
        '–Ω–µ–±–æ–ª—å—à–∏–º', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º', '–º–∞—Å–ª–∞', '–ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ', '–∫—É–∫—É—Ä—É–∑–Ω–æ–µ', '–º–∞–º–∞–ª—ã–≥–∞', '–∫—É–∫—É—Ä—É–∑–Ω–∞—è',
        '–∫–∞—à–∞', '–∫–∞—à–∏', '–ø—é—Ä–µ', '–Ω—É—Ç–∞', '—Ö—É–º—É—Å', '–ª–æ–º—Ç–∏–∫–∞', '–ø–æ–º–∏–¥–æ—Ä–∞', '–ø–æ–º–∏–¥–æ—Ä–æ–≤', '–≤–µ—Ç–æ—á–∫–∞',
        '–ø–µ—Ç—Ä—É—à–∫–∏', '—É–∫—Ä–∞—à–µ–Ω–∏—è', '–ø–æ–ª–∏—Ç–æ', '–º–∞—Å–ª–æ–º', '—Å–∫–æ—Ä–µ–µ', '–≤—Å–µ–≥–æ', '–æ–ª–∏–≤–∫–æ–≤—ã–º'
    }
    
    for word in words[:6]:  # –ë–µ—Ä–µ–º –¥–æ 6 —Å–ª–æ–≤
        clean_word = word.strip('.,!?()[]{}":;').lower()
        if (clean_word and 
            clean_word not in skip_words and 
            len(clean_word) > 2 and 
            not clean_word.isdigit() and  # –ò—Å–∫–ª—é—á–∞–µ–º —á–∏—Å–ª–∞
            not clean_word.endswith('–≥')):  # –ò—Å–∫–ª—é—á–∞–µ–º "250–≥"
            filtered_words.append(clean_word.title())
    
    if filtered_words:
        return ' '.join(filtered_words[:3])  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–ª–æ–≤–∞
    
    return None
