import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from enum import Enum
from services.firebase_service import FirebaseService
from services.gemini_service import GeminiService

logger = logging.getLogger(__name__)

class GoalType(Enum):
    WEIGHT_LOSS = "weight_loss"
    WEIGHT_GAIN = "weight_gain" 
    MAINTENANCE = "maintenance"
    MUSCLE_GAIN = "muscle_gain"
    HEALTH_IMPROVEMENT = "health_improvement"

class PersonalGoalsService:
    def __init__(self):
        self.firebase_service = FirebaseService()
        self.gemini_service = GeminiService()
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
        self.GOAL_CALORIES = {
            GoalType.WEIGHT_LOSS: {
                "deficit": 500,  # –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è
                "protein_ratio": 0.25,  # 25% –±–µ–ª–∫–∞
                "fat_ratio": 0.25,     # 25% –∂–∏—Ä–æ–≤
                "carbs_ratio": 0.50    # 50% —É–≥–ª–µ–≤–æ–¥–æ–≤
            },
            GoalType.WEIGHT_GAIN: {
                "surplus": 300,  # –ø—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –Ω–∞–±–æ—Ä–∞ –≤–µ—Å–∞
                "protein_ratio": 0.30,  # 30% –±–µ–ª–∫–∞
                "fat_ratio": 0.25,     # 25% –∂–∏—Ä–æ–≤
                "carbs_ratio": 0.45    # 45% —É–≥–ª–µ–≤–æ–¥–æ–≤
            },
            GoalType.MAINTENANCE: {
                "deficit": 0,    # –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞
                "protein_ratio": 0.25,  # 25% –±–µ–ª–∫–∞
                "fat_ratio": 0.30,     # 30% –∂–∏—Ä–æ–≤
                "carbs_ratio": 0.45    # 45% —É–≥–ª–µ–≤–æ–¥–æ–≤
            },
            GoalType.MUSCLE_GAIN: {
                "surplus": 200,  # –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à—Ü
                "protein_ratio": 0.35,  # 35% –±–µ–ª–∫–∞
                "fat_ratio": 0.20,     # 20% –∂–∏—Ä–æ–≤
                "carbs_ratio": 0.45    # 45% —É–≥–ª–µ–≤–æ–¥–æ–≤
            },
            GoalType.HEALTH_IMPROVEMENT: {
                "deficit": 0,    # —Ñ–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∏—Ç–∞–Ω–∏—è
                "protein_ratio": 0.25,  # 25% –±–µ–ª–∫–∞
                "fat_ratio": 0.30,     # 30% –∂–∏—Ä–æ–≤
                "carbs_ratio": 0.45    # 45% —É–≥–ª–µ–≤–æ–¥–æ–≤
            }
        }

    async def set_user_goal(self, user_id: int, goal_type: str, target_weight: Optional[float] = None, 
                           current_weight: Optional[float] = None, height: Optional[float] = None,
                           age: Optional[int] = None, activity_level: str = "moderate") -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–∏–ø —Ü–µ–ª–∏
            try:
                goal_enum = GoalType(goal_type)
            except ValueError:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ü–µ–ª–∏: {goal_type}")
                return False
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
            daily_calories = await self._calculate_daily_calories(
                current_weight, height, age, activity_level, goal_enum
            )
            
            goal_data = {
                'goal_type': goal_type,
                'target_weight': target_weight,
                'current_weight': current_weight,
                'height': height,
                'age': age,
                'activity_level': activity_level,
                'daily_calories': daily_calories,
                'goal_set_at': datetime.now(),
                'last_updated': datetime.now()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
            user_ref = self.firebase_service.db.collection('users').document(str(user_id))
            user_ref.set({
                'personal_goal': goal_data
            }, merge=True)
            
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–ª—å {goal_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏: {e}")
            return False

    async def _calculate_daily_calories(self, weight: Optional[float], height: Optional[float], 
                                      age: Optional[int], activity_level: str, goal_type: GoalType) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π"""
        try:
            if not all([weight, height, age]):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
                base_calories = 2000
            else:
                # –§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
                if weight and height and age:
                    # –ú—É–∂—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º—É–∂—Å–∫–æ–π –ø–æ–ª)
                    bmr = 10 * weight + 6.25 * height - 5 * age + 5
                else:
                    bmr = 2000
                
                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                activity_multipliers = {
                    "sedentary": 1.2,    # –º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π
                    "light": 1.375,      # –ª–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    "moderate": 1.55,    # —É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    "active": 1.725,     # –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    "very_active": 1.9   # –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                }
                
                multiplier = activity_multipliers.get(activity_level, 1.55)
                base_calories = int(bmr * multiplier)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
            goal_config = self.GOAL_CALORIES[goal_type]
            
            if goal_config.get('deficit', 0) > 0:
                daily_calories = base_calories - goal_config['deficit']
            elif goal_config.get('surplus', 0) > 0:
                daily_calories = base_calories + goal_config['surplus']
            else:
                daily_calories = base_calories
            
            return max(daily_calories, 1200)  # –ú–∏–Ω–∏–º—É–º 1200 –∫–∞–ª–æ—Ä–∏–π
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π: {e}")
            return 2000

    async def get_user_goal(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_data = await self.firebase_service.get_user_info(user_id)
            return user_data.get('personal_goal')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–∏: {e}")
            return None

    async def generate_smart_recommendations(self, user_id: int, daily_nutrition: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏ –∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"""
        try:
            goal = await self.get_user_goal(user_id)
            if not goal:
                return "üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!"
            
            goal_type = GoalType(goal['goal_type'])
            daily_calories = goal.get('daily_calories', 2000)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –ø–∏—Ç–∞–Ω–∏–µ
            current_calories = daily_nutrition.get('calories', 0)
            current_proteins = daily_nutrition.get('proteins', 0)
            current_fats = daily_nutrition.get('fats', 0)
            current_carbs = daily_nutrition.get('carbs', 0)
            
            recommendations = []
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π
            calorie_diff = current_calories - daily_calories
            if abs(calorie_diff) > 200:
                if calorie_diff > 0:
                    recommendations.append(f"üìâ –°–µ–≥–æ–¥–Ω—è –Ω–∞ {calorie_diff:.0f} –∫–∫–∞–ª –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ª–µ–≥–∫–∏–π —É–∂–∏–Ω.")
                else:
                    recommendations.append(f"üìà –°–µ–≥–æ–¥–Ω—è –Ω–∞ {abs(calorie_diff):.0f} –∫–∫–∞–ª –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–π –ø–µ—Ä–µ–∫—É—Å.")
            
            # –ê–Ω–∞–ª–∏–∑ –ë–ñ–£
            goal_config = self.GOAL_CALORIES[goal_type]
            target_proteins = daily_calories * goal_config['protein_ratio'] / 4  # 4 –∫–∫–∞–ª/–≥ –±–µ–ª–∫–∞
            target_fats = daily_calories * goal_config['fat_ratio'] / 9  # 9 –∫–∫–∞–ª/–≥ –∂–∏—Ä–∞
            target_carbs = daily_calories * goal_config['carbs_ratio'] / 4  # 4 –∫–∫–∞–ª/–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
            
            if current_proteins < target_proteins * 0.8:
                protein_diff = target_proteins - current_proteins
                recommendations.append(f"ü•© –ú–∞–ª–æ –±–µ–ª–∫–∞! –î–æ–±–∞–≤—å—Ç–µ {protein_diff:.0f}–≥ –±–µ–ª–∫–∞: –∫—É—Ä–∏—Ü–∞, —Ç–≤–æ—Ä–æ–≥, —è–π—Ü–∞.")
            
            if current_fats < target_fats * 0.7:
                fat_diff = target_fats - current_fats
                recommendations.append(f"ü•ë –ú–∞–ª–æ –∂–∏—Ä–æ–≤! –î–æ–±–∞–≤—å—Ç–µ {fat_diff:.0f}–≥: –æ—Ä–µ—Ö–∏, –∞–≤–æ–∫–∞–¥–æ, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ.")
            
            if current_carbs < target_carbs * 0.8:
                carb_diff = target_carbs - current_carbs
                recommendations.append(f"üçû –ú–∞–ª–æ —É–≥–ª–µ–≤–æ–¥–æ–≤! –î–æ–±–∞–≤—å—Ç–µ {carb_diff:.0f}–≥: –∫—Ä—É–ø—ã, —Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏.")
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–ª–∏
            if goal_type == GoalType.WEIGHT_LOSS:
                if current_calories > daily_calories:
                    recommendations.append("üí™ –î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è: –±–æ–ª—å—à–µ –±–µ–ª–∫–∞, –º–µ–Ω—å—à–µ –ø—Ä–æ—Å—Ç—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤.")
            elif goal_type == GoalType.MUSCLE_GAIN:
                if current_proteins < target_proteins:
                    recommendations.append("üí™ –î–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à—Ü: —É–≤–µ–ª–∏—á—å—Ç–µ –±–µ–ª–æ–∫ –¥–æ 1.6-2–≥ –Ω–∞ –∫–≥ –≤–µ—Å–∞.")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Gemini
            ai_recommendations = await self._generate_ai_recommendations(
                goal_type, daily_nutrition, goal
            )
            
            if ai_recommendations:
                recommendations.append(ai_recommendations)
            
            if not recommendations:
                return "‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ! –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏!"
            
            return "ü§ñ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n\n" + "\n".join(f"‚Ä¢ {rec}" for rec in recommendations)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    async def _generate_ai_recommendations(self, goal_type: GoalType, nutrition: Dict, goal: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ò–ò"""
        try:
            prompt = f"""
–¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∏—Ç–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–¶–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {goal_type.value}
–¢–µ–∫—É—â–µ–µ –ø–∏—Ç–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å:
- –ö–∞–ª–æ—Ä–∏–∏: {nutrition.get('calories', 0)}
- –ë–µ–ª–∫–∏: {nutrition.get('proteins', 0)}–≥
- –ñ–∏—Ä—ã: {nutrition.get('fats', 0)}–≥  
- –£–≥–ª–µ–≤–æ–¥—ã: {nutrition.get('carbs', 0)}–≥

–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {goal.get('daily_calories', 2000)}

–î–∞–π 1-2 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏. 
–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏.
–ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
"""
            
            response = await self.gemini_service.generate_text(prompt)
            return response.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return ""

    async def get_goal_progress(self, user_id: int, days: int = 7) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            goal = await self.get_user_goal(user_id)
            if not goal:
                return {"error": "–¶–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"}
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days)
            
            analyses = await self.firebase_service.get_weekly_analyses(
                user_id, start_date.strftime('%Y-%m-%d')
            )
            
            if not analyses:
                return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥"}
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            total_nutrition = await self.firebase_service.aggregate_daily_nutrition(analyses)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            avg_calories = total_nutrition['calories'] / days
            avg_proteins = total_nutrition['proteins'] / days
            avg_fats = total_nutrition['fats'] / days
            avg_carbs = total_nutrition['carbs'] / days
            
            daily_target = goal.get('daily_calories', 2000)
            
            progress = {
                'period_days': days,
                'avg_calories': round(avg_calories, 0),
                'avg_proteins': round(avg_proteins, 1),
                'avg_fats': round(avg_fats, 1),
                'avg_carbs': round(avg_carbs, 1),
                'calorie_target': daily_target,
                'calorie_accuracy': round((avg_calories / daily_target) * 100, 1),
                'goal_type': goal['goal_type'],
                'analyses_count': len(analyses)
            }
            
            return progress
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return {"error": "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"}

    async def can_use_personal_goals(self, user_id: int) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π"""
        try:
            from services.subscription_service import SubscriptionService
            subscription_service = SubscriptionService()
            
            subscription = await subscription_service.get_user_subscription(user_id)
            subscription_type = subscription.get('type', 'lite')
            
            if subscription_type == 'lite':
                return False, "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Pro"
            
            return True, ""
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–µ–ª—è–º: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"
