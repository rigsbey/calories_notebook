import os
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.gemini_service import GeminiService
from services.google_calendar import GoogleCalendarService
from services.analysis_storage import analysis_storage
from services.firebase_service import FirebaseService
from services.timezone_service import TimezoneService
from config import TEMP_DIR
from utils import error_handler, format_nutrition_info, extract_meal_title

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class FoodAnalysisStates(StatesGroup):
    waiting_for_weight = State()

class TimezoneStates(StatesGroup):
    waiting_for_timezone = State()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ò—Ç–æ–≥–∏ –¥–Ω—è"), KeyboardButton(text="üìà –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏")],
            [KeyboardButton(text="üì∏ –ê–Ω–∞–ª–∏–∑ –µ–¥—ã"), KeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")],
            [KeyboardButton(text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
gemini_service = GeminiService()
calendar_service = GoogleCalendarService()
firebase_service = FirebaseService()
timezone_service = TimezoneService()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

@router.message(Command("start"))
@error_handler
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    await firebase_service.create_or_update_user(
        user_id=user_id,
        username=username,
        first_name=first_name,
        last_name=last_name
    )
    
    welcome_text = """
üçΩÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è!

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã, –∏ —è:
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—é —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞
‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—é –ö–ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–∏
‚Ä¢ –£–∫–∞–∂—É –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Google Calendar

üìÖ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!
    """
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@router.message(F.photo)
@error_handler
async def photo_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –µ–¥—ã"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        
        await firebase_service.create_or_update_user(
            user_id=user_id,
            username=username,
            first_name=first_name,
            last_name=last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo = message.photo[-1]
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = await message.bot.get_file(photo.file_id)
        file_extension = file_info.file_path.split('.')[-1]
        file_path = os.path.join(TEMP_DIR, f"food_{message.from_user.id}_{photo.file_id}.{file_extension}")
        
        await message.bot.download_file(file_info.file_path, file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(photo_path=file_path)
        await state.set_state(FoodAnalysisStates.waiting_for_weight)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ –∑–Ω–∞—é"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùì –ù–µ –∑–Ω–∞—é –≥—Ä–∞–º–º–æ–≤–∫—É", callback_data="unknown_weight")]
        ])
        
        await message.answer(
            "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å –µ–¥—ã –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250)\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —Ç–æ—á–Ω—ã–π –≤–µ—Å:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑."
        )

@router.callback_query(F.data == "unknown_weight")
@error_handler
async def unknown_weight_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–µ –∑–Ω–∞—é –≥—Ä–∞–º–º–æ–≤–∫—É'"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    photo_path = data.get('photo_path')
    
    if not photo_path or not os.path.exists(photo_path):
        await callback.message.answer(
            "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –µ–¥—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è—é –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–¥—É —á–µ—Ä–µ–∑ Gemini –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–µ—Å–∞
    analysis_result = await gemini_service.analyze_food_auto_weight(photo_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_id = callback.from_user.id if callback.from_user else None
    if user_id is not None:
        analysis_storage.store_analysis(
            user_id=user_id,
            analysis_text=analysis_result,
            image_path=photo_path,
            weight=None  # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞
        )
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
        user_id = callback.from_user.id
        if user_id is not None:
            analysis_data = {
                'analysis_text': analysis_result,
                'weight': 'auto',
                'user_id': str(user_id)
            }
            analysis_id = await firebase_service.save_analysis(user_id, analysis_data)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    formatted_response = format_nutrition_info(analysis_result)
    final_response = f"üçΩÔ∏è **–í–∞—à –ø—Ä–∏–µ–º –ø–∏—â–∏ (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞):**\n\n{formatted_response}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await callback.message.answer(final_response, parse_mode="Markdown")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å Markdown: {e}")
        await callback.message.answer(final_response)
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(photo_path)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω)
    event_id = None
    try:
        if calendar_service:
            title = extract_meal_title(analysis_result)
            success = await calendar_service.create_meal_event(
                user_id=user_id,
                title=title,
                description=formatted_response,
                event_time=callback.message.date
            )
            if success:
                # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                # (—ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å ID –∏–∑ create_meal_event)
                event_id = "latest"  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {e}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    calendar_status = ""
    try:
        connected = await calendar_service.ensure_connected(callback.from_user.id)
        if connected:
            calendar_status = "\n‚úÖ **–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Calendar!**"
        else:
            calendar_status = "\nüìÖ **–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar** (/gconnect) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤"
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        calendar_status = "\nüìÖ **–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar** (/gconnect) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤"
    
    await callback.message.answer(
            f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!{calendar_status}\n\n"
            "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:\n"
            "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞\"\n"
            "‚Ä¢ \"–í–µ—Å –Ω–µ 450–≥, –∞ 300–≥\"\n"
            "‚Ä¢ \"–î–æ–±–∞–≤—å —Ç—É–¥–∞ –µ—â–µ –ø–æ–º–∏–¥–æ—Ä—ã\"\n\n"
            "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            parse_mode="Markdown"
        )

@router.message(FoodAnalysisStates.waiting_for_weight)
@error_handler
async def weight_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Å–∞ –µ–¥—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        try:
            weight = int(message.text.strip())
            if weight <= 0 or weight > 5000:
                await message.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –æ—Ç 1 –¥–æ 5000 –≥—Ä–∞–º–º"
                )
                return
        except ValueError:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250)"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        photo_path = data.get('photo_path')
        
        if not photo_path or not os.path.exists(photo_path):
            await message.answer(
                "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∑–∞–Ω–æ–≤–æ."
            )
            await state.clear()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –µ–¥—ã...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–¥—É —á–µ—Ä–µ–∑ Gemini
        analysis_result = await gemini_service.analyze_food(photo_path, weight)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user_id = message.from_user.id if message.from_user else None
        if user_id is not None:
            analysis_storage.store_analysis(
                user_id=user_id,
                analysis_text=analysis_result,
                image_path=photo_path,
                weight=weight
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
        user_id = message.from_user.id
        if user_id is not None:
            analysis_data = {
                'analysis_text': analysis_result,
                'weight': str(weight),
                'user_id': str(user_id)
            }
            await firebase_service.save_analysis(user_id, analysis_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_response = format_nutrition_info(analysis_result)
        final_response = f"üçΩÔ∏è **–í–∞—à –ø—Ä–∏–µ–º –ø–∏—â–∏ ({weight} –≥):**\n\n{formatted_response}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ Markdown —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞)
        try:
            await message.answer(final_response, parse_mode="Markdown")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å Markdown: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Markdown
            await message.answer(final_response)
        
        # Google Calendar –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # await message.answer("üìÖ Google Calendar –æ—Ç–∫–ª—é—á–µ–Ω")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω)
        try:
            if calendar_service:
                title = extract_meal_title(analysis_result)
                await calendar_service.create_meal_event(
                    user_id=user_id,
                    title=title,
                    description=formatted_response,
                    event_time=callback.message.date
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(photo_path)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        calendar_status = ""
        try:
            connected = await calendar_service.ensure_connected(message.from_user.id)
            if connected:
                calendar_status = "\n‚úÖ **–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Calendar!**"
            else:
                calendar_status = "\nüìÖ **–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar** (/gconnect) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤"
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            calendar_status = "\nüìÖ **–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar** (/gconnect) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤"
        
        await message.answer(
            f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!{calendar_status}\n\n"
            "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:\n"
            "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞\"\n"
            "‚Ä¢ \"–í–µ—Å –Ω–µ 450–≥, –∞ 300–≥\"\n"
            "‚Ä¢ \"–î–æ–±–∞–≤—å —Ç—É–¥–∞ –µ—â–µ –ø–æ–º–∏–¥–æ—Ä—ã\"\n\n"
            "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–µ—Å–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–ï–î –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Ç–µ–∫—Å—Ç–∞)
@router.message(F.text == "üìä –ò—Ç–æ–≥–∏ –¥–Ω—è")
@error_handler
async def daily_summary_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Ç–æ–≥–∏ –¥–Ω—è'"""
    from services.report_service import ReportService
    report_service = ReportService()
    
    try:
        await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å...")
        report = await report_service.generate_daily_report(message.from_user.id)
        await message.answer(report)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üìà –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏")
@error_handler
async def weekly_summary_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏'"""
    from services.report_service import ReportService
    report_service = ReportService()
    
    try:
        await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é...")
        report = await report_service.generate_weekly_report(message.from_user.id)
        await message.answer(report)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üì∏ –ê–Ω–∞–ª–∏–∑ –µ–¥—ã")
@error_handler
async def food_analysis_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª–∏–∑ –µ–¥—ã'"""
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!\n\n"
        "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Å—Ç–∞–≤, —Ä–∞—Å—Å—á–∏—Ç–∞—é –ö–ë–ñ–£ –∏ –æ–ø—Ä–µ–¥–µ–ª—é –≤–∏—Ç–∞–º–∏–Ω—ã.",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
@error_handler
async def calendar_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å'"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        connected = await calendar_service.ensure_connected(message.from_user.id)
        
        if connected:
            await message.answer(
                "‚úÖ **Google Calendar –ø–æ–¥–∫–ª—é—á–µ–Ω!**\n\n"
                "üìÖ –í—Å–µ –∞–Ω–∞–ª–∏–∑—ã –µ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–∏—Ç–∞–Ω–∏—è.\n"
                "üîó –°–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–∞–≤–µ –∏ –ö–ë–ñ–£.\n\n"
                "üí° **–ö–æ–º–∞–Ω–¥—ã:**\n"
                "‚Ä¢ `/gstatus` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
                "‚Ä¢ `/gdisconnect` - –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
                parse_mode="Markdown",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer(
                "üìÖ **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Calendar**\n\n"
                "üîó –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –µ–¥—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:\n\n"
                "1. –ù–∞–∂–º–∏—Ç–µ /gconnect –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
                "2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Google\n"
                "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n\n"
                "‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
@error_handler
async def help_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/day - –ò—Ç–æ–≥–∏ –¥–Ω—è (–±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø)
/week - –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ (–±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø)
/summary - –ò—Ç–æ–≥–∏ –¥–Ω—è
/summary week - –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏
/gconnect - –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar
/gstatus - –°—Ç–∞—Ç—É—Å Google Calendar
/gdisconnect - –û—Ç–∫–ª—é—á–∏—Ç—å Google Calendar

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã
2. üî¢ –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö
3. üìä –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –ö–ë–ñ–£
4. üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ –§–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, PNG
‚Ä¢ –í–µ—Å –æ—Ç 1 –¥–æ 5000 –≥—Ä–∞–º–º
‚Ä¢ –õ—é–±—ã–µ –±–ª—é–¥–∞ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã

**–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç:**
‚Ä¢ –°–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏ –∏ –ö–ë–ñ–£
‚Ä¢ –í–∏—Ç–∞–º–∏–Ω—ã –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞
‚Ä¢ –ü–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.
    """
    await message.answer(help_text, parse_mode="Markdown", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–ï–î –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Ç–µ–∫—Å—Ç–∞
@router.message(Command("day"))
@error_handler
async def day_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /day - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏—Ç–æ–≥–∞–º –¥–Ω—è"""
    from services.report_service import ReportService
    report_service = ReportService()
    
    try:
        await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å...")
        report = await report_service.generate_daily_report(message.from_user.id)
        await message.answer(report, reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())

@router.message(Command("week"))
@error_handler
async def week_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /week - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏—Ç–æ–≥–∞–º –Ω–µ–¥–µ–ª–∏"""
    from services.report_service import ReportService
    report_service = ReportService()
    
    try:
        await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é...")
        report = await report_service.generate_weekly_report(message.from_user.id)
        await message.answer(report, reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())

@router.message(Command("summary"))
@error_handler
async def summary_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /summary - —Å–≤–æ–¥–∫–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    command_args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    from services.report_service import ReportService
    report_service = ReportService()
    
    try:
        if 'week' in command_args:
            await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é...")
            report = await report_service.generate_weekly_report(message.from_user.id)
        else:
            await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å...")
            report = await report_service.generate_daily_report(message.from_user.id)
        
        await message.answer(report, reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())

@router.message(Command("gconnect"))
@error_handler
async def gconnect_handler(message: Message):
    """–°—Ç–∞—Ä—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Calendar"""
    try:
        auth_url = await calendar_service.get_auth_url(message.from_user.id)
        await message.answer(
            "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Calendar –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –¥–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø:",
        )
        await message.answer(auth_url)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("gstatus"))
@error_handler
async def gstatus_handler(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Calendar"""
    try:
        connected = await calendar_service.ensure_connected(message.from_user.id)
        if connected:
            await message.answer("‚úÖ Google Calendar –ø–æ–¥–∫–ª—é—á–µ–Ω. –°–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–∏—Ç–∞–Ω–∏—è.")
        else:
            await message.answer("‚ö†Ô∏è Google Calendar –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /gconnect –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("gdisconnect"))
@error_handler
async def gdisconnect_handler(message: Message):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ Google Calendar –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        connected = await calendar_service.ensure_connected(message.from_user.id)
        
        if not connected:
            await message.answer(
                "‚ÑπÔ∏è Google Calendar –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /gconnect"
            )
            return
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        success = await calendar_service.disconnect_calendar(message.from_user.id)
        
        if success:
            await message.answer(
                "‚úÖ **Google Calendar –æ—Ç–∫–ª—é—á–µ–Ω!**\n\n"
                "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤–∞—à–∏–º–∏ –∞–Ω–∞–ª–∏–∑–∞–º–∏ –µ–¥—ã.\n"
                "üîó –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /gconnect",
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å Google Calendar. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text)
@error_handler
async def text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–∞–≤–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if analysis_storage.has_recent_analysis(user_id):
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑
        last_analysis = analysis_storage.get_last_analysis(user_id)
        
        if last_analysis:
            await message.answer("üîÑ –ò—Å–ø—Ä–∞–≤–ª—è—é –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –∑–∞–º–µ—á–∞–Ω–∏–π...")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Gemini
            corrected_analysis = await gemini_service.correct_analysis(
                original_analysis=last_analysis['analysis_text'],
                user_correction=message.text
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            analysis_storage.update_analysis(user_id, corrected_analysis)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            formatted_response = format_nutrition_info(corrected_analysis)
            weight_info = f" ({last_analysis['weight']} –≥)" if last_analysis['weight'] else " (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞)"
            final_response = f"üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑{weight_info}:\n\n{formatted_response}"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar
            try:
                if calendar_service:
                    title = extract_meal_title(corrected_analysis)
                    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å event_id –≤ analysis_storage
                    await calendar_service.update_latest_meal_event(
                        user_id=user_id,
                        title=title,
                        description=formatted_response
                    )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
            await message.answer(final_response)
            
            await message.answer(
                "‚úÖ –ê–Ω–∞–ª–∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                "üí¨ –ù—É–∂–Ω—ã –µ—â–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n"
                "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )
            return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    await message.answer(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!\n\n"
        "üí° –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:\n"
        "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ —à–ø–∏–Ω–∞—Ç\"\n"
        "‚Ä¢ \"–í–µ—Å –Ω–µ 300–≥, –∞ 250–≥\"\n"
        "‚Ä¢ \"–î–æ–±–∞–≤—å —Ç—É–¥–∞ –º–æ—Ä–∫–æ–≤—å\""
    )


@router.message(F.text == "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
@error_handler
async def timezone_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    timezones = timezone_service.get_common_timezones()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞ –≤ —Ä—è–¥
    for i in range(0, len(timezones), 2):
        row = []
        for j in range(2):
            if i + j < len(timezones):
                tz = timezones[i + j]
                tz_name = timezone_service.format_timezone_name(tz)
                row.append(InlineKeyboardButton(
                    text=tz_name,
                    callback_data=f"timezone_{tz}"
                ))
        keyboard.inline_keyboard.append(row)
    
    await message.answer(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 20:00 –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.",
        reply_markup=keyboard
    )
    await state.set_state(TimezoneStates.waiting_for_timezone)

@router.callback_query(F.data.startswith("timezone_"))
@error_handler
async def timezone_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    timezone = callback.data.replace("timezone_", "")
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await firebase_service.create_or_update_user(
        user_id=user_id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
        timezone=timezone
    )
    
    tz_name = timezone_service.format_timezone_name(timezone)
    await callback.message.edit_text(
        f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 20:00 –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏."
    )
    await state.clear()

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    from commands import commands_router
    dp.include_router(router)
    dp.include_router(commands_router)
