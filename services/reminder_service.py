import logging
from datetime import datetime, timedelta, time
from typing import Dict, List, Optional
from enum import Enum
from services.firebase_service import FirebaseService
from services.subscription_service import SubscriptionService
from services.personal_goals_service import PersonalGoalsService

logger = logging.getLogger(__name__)

class ReminderType(Enum):
    WATER = "water"
    MEAL = "meal"
    CALORIE_LIMIT = "calorie_limit"
    GOAL_PROGRESS = "goal_progress"
    MOTIVATION = "motivation"

class ReminderService:
    def __init__(self):
        self.firebase_service = FirebaseService()
        self.subscription_service = SubscriptionService()
        self.personal_goals_service = PersonalGoalsService()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.REMINDER_TIMES = {
            ReminderType.WATER: [9, 12, 15, 18, 21],  # –ß–∞—Å—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–æ–¥–µ
            ReminderType.MEAL: [8, 13, 19],  # –ß–∞—Å—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –µ–¥–µ
            ReminderType.CALORIE_LIMIT: [20],  # –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π
            ReminderType.GOAL_PROGRESS: [22],  # –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            ReminderType.MOTIVATION: [7, 19]  # –£—Ç—Ä–µ–Ω–Ω—è—è –∏ –≤–µ—á–µ—Ä–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è
        }
        
        # –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        self.MESSAGE_TEMPLATES = {
            ReminderType.WATER: [
                "üíß **–í—Ä–µ–º—è –ø–∏—Ç—å –≤–æ–¥—É!**\n\n–í—ã–ø–µ–π—Ç–µ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.",
                "üö∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ**\n\n–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–∏—Ç—å –≤–æ–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è!",
                "üí¶ **–í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å**\n\n–°—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ."
            ],
            ReminderType.MEAL: [
                "üçΩÔ∏è **–í—Ä–µ–º—è –æ–±–µ–¥–∞!**\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –æ–±–µ–¥ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.",
                "ü•ó **–í—Ä–µ–º—è —É–∂–∏–Ω–∞**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —É–∂–∏–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ë–ñ–£.",
                "üåÖ **–í—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞–∫–∞**\n\n–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤—Ç—Ä–∞–∫–∞!"
            ],
            ReminderType.CALORIE_LIMIT: [
                "üìä **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–ª–æ—Ä–∏–∏**\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è.",
                "‚öñÔ∏è **–ë–∞–ª–∞–Ω—Å –∫–∞–ª–æ—Ä–∏–π**\n\n–û—Å—Ç–∞–ª–æ—Å—å –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø–µ—Ä–µ–∫—É—Å–∞?",
                "üéØ **–¶–µ–ª—å –Ω–∞ –¥–µ–Ω—å**\n\n–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ –≤–∞—à–µ–π —Ü–µ–ª–∏?"
            ],
            ReminderType.GOAL_PROGRESS: [
                "üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å**\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã –ø—Ä–æ–¥–≤–∏–Ω—É–ª–∏—Å—å –∫ —Ü–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è.",
                "üéØ **–ò—Ç–æ–≥–∏ –¥–Ω—è**\n\n–ö–æ–º–∞–Ω–¥–∞ /day –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å.",
                "üí™ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è**\n\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏!"
            ],
            ReminderType.MOTIVATION: [
                "üåÖ **–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!**\n\n–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –≤–∞—à–∏–º–∏ —Ü–µ–ª—è–º–∏!",
                "üåô **–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä**\n\n–ì–æ—Ä–¥–∏—Ç–µ—Å—å —Ç–µ–º, —á—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –¥–ª—è —Å–≤–æ–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ–≥–æ–¥–Ω—è!",
                "üí™ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è**\n\n–ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π —à–∞–≥ –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –≤–∞–∂–µ–Ω!"
            ]
        }

    async def get_user_reminders(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_data = await self.firebase_service.get_user_info(user_id)
            reminders = user_data.get('reminders', {})
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_reminders = {
                'water_reminders': True,
                'meal_reminders': True,
                'calorie_reminders': True,
                'progress_reminders': True,
                'motivation_reminders': True,
                'reminder_timezone': 'UTC',
                'last_reminder_sent': None
            }
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            for key, value in default_reminders.items():
                if key not in reminders:
                    reminders[key] = value
            
            return reminders
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                'water_reminders': True,
                'meal_reminders': True,
                'calorie_reminders': True,
                'progress_reminders': True,
                'motivation_reminders': True,
                'reminder_timezone': 'UTC',
                'last_reminder_sent': None
            }

    async def update_user_reminders(self, user_id: int, reminder_settings: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_ref = self.firebase_service.db.collection('users').document(str(user_id))
            user_ref.set({
                'reminders': reminder_settings
            }, merge=True)
            
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return False

    async def should_send_reminder(self, user_id: int, reminder_type: ReminderType) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º)
            if reminder_type != ReminderType.WATER:
                subscription = await self.subscription_service.get_user_subscription(user_id)
                if subscription.get('type') == 'lite':
                    return False
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reminders = await self.get_user_reminders(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
            reminder_key = f"{reminder_type.value}_reminders"
            if not reminders.get(reminder_key, True):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            last_sent = reminders.get('last_reminder_sent')
            if last_sent:
                last_sent_time = datetime.fromisoformat(last_sent) if isinstance(last_sent, str) else last_sent
                # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ —á–∞—Å
                if datetime.now() - last_sent_time < timedelta(hours=1):
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return False

    async def generate_reminder_message(self, user_id: int, reminder_type: ReminderType) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            templates = self.MESSAGE_TEMPLATES[reminder_type]
            import random
            base_message = random.choice(templates)
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if reminder_type == ReminderType.CALORIE_LIMIT:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∫–∞–ª–æ—Ä–∏—è—Ö
                today = datetime.now().strftime('%Y-%m-%d')
                analyses = await self.firebase_service.get_daily_analyses(user_id, today)
                
                if analyses:
                    daily_nutrition = await self.firebase_service.aggregate_daily_nutrition(analyses)
                    current_calories = daily_nutrition.get('calories', 0)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    goal = await self.personal_goals_service.get_user_goal(user_id)
                    if goal:
                        daily_target = goal.get('daily_calories', 2000)
                        remaining = daily_target - current_calories
                        
                        if remaining > 0:
                            base_message += f"\n\nüìä **–°–µ–≥–æ–¥–Ω—è:** {current_calories} –∫–∫–∞–ª –∏–∑ {daily_target}\n"
                            base_message += f"üçΩÔ∏è **–û—Å—Ç–∞–ª–æ—Å—å:** {remaining} –∫–∫–∞–ª"
                        else:
                            base_message += f"\n\nüìä **–°–µ–≥–æ–¥–Ω—è:** {current_calories} –∫–∫–∞–ª –∏–∑ {daily_target}\n"
                            base_message += f"‚ö†Ô∏è **–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ:** {abs(remaining)} –∫–∫–∞–ª"
            
            elif reminder_type == ReminderType.GOAL_PROGRESS:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                goal = await self.personal_goals_service.get_user_goal(user_id)
                if goal:
                    goal_type_names = {
                        "weight_loss": "üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ",
                        "weight_gain": "üìà –ù–∞–±–æ—Ä –≤–µ—Å–∞", 
                        "maintenance": "‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞",
                        "muscle_gain": "üí™ –ù–∞–±–æ—Ä –º—ã—à—Ü",
                        "health_improvement": "üè• –£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"
                    }
                    goal_name = goal_type_names.get(goal['goal_type'], goal['goal_type'])
                    base_message += f"\n\nüéØ **–í–∞—à–∞ —Ü–µ–ª—å:** {goal_name}"
            
            return base_message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return self.MESSAGE_TEMPLATES[reminder_type][0]

    async def send_reminder(self, bot, user_id: int, reminder_type: ReminderType) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            if not await self.should_send_reminder(user_id, reminder_type):
                return False
            
            message = await self.generate_reminder_message(user_id, reminder_type)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard_buttons = []
            
            if reminder_type == ReminderType.MEAL:
                keyboard_buttons.append([InlineKeyboardButton(text="üì∏ –ê–Ω–∞–ª–∏–∑ –µ–¥—ã", callback_data="analyze_food")])
            elif reminder_type == ReminderType.CALORIE_LIMIT:
                keyboard_buttons.append([InlineKeyboardButton(text="üìä –ò—Ç–æ–≥–∏ –¥–Ω—è", callback_data="daily_summary")])
            elif reminder_type == ReminderType.GOAL_PROGRESS:
                keyboard_buttons.append([InlineKeyboardButton(text="üéØ –ú–æ–∏ —Ü–µ–ª–∏", callback_data="show_goals")])
            
            keyboard_buttons.append([InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="disable_reminders")])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await bot.send_message(user_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await self.update_last_reminder_time(user_id)
            
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_type.value} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return False

    async def update_last_reminder_time(self, user_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            user_ref = self.firebase_service.db.collection('users').document(str(user_id))
            user_ref.set({
                'reminders.last_reminder_sent': datetime.now()
            }, merge=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    async def get_users_for_reminder(self, reminder_type: ReminderType, current_hour: int) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —ç—Ç–æ –≤—Ä–µ–º—è
            reminder_hours = self.REMINDER_TIMES.get(reminder_type, [])
            if current_hour not in reminder_hours:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await self.firebase_service.get_users_with_timezones()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            target_users = []
            for user in users:
                user_id = user['user_id']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º)
                if reminder_type != ReminderType.WATER:
                    subscription = await self.subscription_service.get_user_subscription(user_id)
                    if subscription.get('type') == 'lite':
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                reminders = await self.get_user_reminders(user_id)
                reminder_key = f"{reminder_type.value}_reminders"
                if not reminders.get(reminder_key, True):
                    continue
                
                target_users.append(user_id)
            
            return target_users
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return []

    async def send_motivational_message(self, bot, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription = await self.subscription_service.get_user_subscription(user_id)
            if subscription.get('type') == 'lite':
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            goal = await self.personal_goals_service.get_user_goal(user_id)
            today = datetime.now().strftime('%Y-%m-%d')
            analyses = await self.firebase_service.get_daily_analyses(user_id, today)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if goal and analyses:
                daily_nutrition = await self.firebase_service.aggregate_daily_nutrition(analyses)
                current_calories = daily_nutrition.get('calories', 0)
                daily_target = goal.get('daily_calories', 2000)
                
                goal_type_names = {
                    "weight_loss": "–ø–æ—Ö—É–¥–µ–Ω–∏—è",
                    "weight_gain": "–Ω–∞–±–æ—Ä–∞ –≤–µ—Å–∞", 
                    "maintenance": "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞",
                    "muscle_gain": "–Ω–∞–±–æ—Ä–∞ –º—ã—à—Ü",
                    "health_improvement": "—É–ª—É—á—à–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è"
                }
                goal_name = goal_type_names.get(goal['goal_type'], "–≤–∞—à–µ–π —Ü–µ–ª–∏")
                
                if current_calories > 0:
                    accuracy = (current_calories / daily_target) * 100
                    
                    if accuracy >= 80 and accuracy <= 120:
                        message = f"üéâ **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!**\n\n"
                        message += f"–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ {goal_name}!\n"
                        message += f"üìä –°–µ–≥–æ–¥–Ω—è: {current_calories} –∫–∫–∞–ª –∏–∑ {daily_target}\n"
                        message += f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%\n\n"
                        message += f"üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
                    elif accuracy < 80:
                        message = f"üí™ **–ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!**\n\n"
                        message += f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ {goal_name}!\n"
                        message += f"üìä –°–µ–≥–æ–¥–Ω—è: {current_calories} –∫–∫–∞–ª –∏–∑ {daily_target}\n"
                        message += f"üçΩÔ∏è –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–π –ø–µ—Ä–µ–∫—É—Å!\n\n"
                        message += f"üåü –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ!"
                    else:
                        message = f"üéØ **–°–ª–µ–¥–∏—Ç–µ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º!**\n\n"
                        message += f"–í—ã –±–ª–∏–∑–∫–æ –∫ {goal_name}!\n"
                        message += f"üìä –°–µ–≥–æ–¥–Ω—è: {current_calories} –∫–∫–∞–ª –∏–∑ {daily_target}\n"
                        message += f"‚öñÔ∏è –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ—Ä—Ü–∏—è–º–∏\n\n"
                        message += f"üí° –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å!"
                else:
                    message = f"üåÖ **–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n"
                    message += f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è {goal_name}!\n"
                    message += f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–Ω—è!"
            else:
                message = f"üí™ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –¥–µ–Ω—å!**\n\n"
                message += f"–ö–∞–∂–¥—ã–π —à–∞–≥ –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –≤–∞–∂–µ–Ω!\n"
                message += f"üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –µ–¥—É –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º!"
            
            await bot.send_message(user_id, message, parse_mode="Markdown")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
