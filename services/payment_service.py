import logging
from datetime import datetime, timedelta
from typing import Dict, Optional, List
from aiogram import Bot
from aiogram.types import LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from services.subscription_service import SubscriptionService
from config import BOT_TOKEN

logger = logging.getLogger(__name__)

class PaymentService:
    def __init__(self, bot: Bot = None):
        self.bot = bot or Bot(token=BOT_TOKEN)
        self.subscription_service = SubscriptionService()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        # –î–ª—è Telegram Stars –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        self.PAYMENT_PROVIDER_TOKEN = ""  # –î–ª—è Stars –Ω–µ –Ω—É–∂–µ–Ω provider_token
        
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤ –±—É–¥—É—â–µ–º)
        # self.PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")

    async def create_subscription_payment(self, user_id: int, plan: str, duration: int) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            pricing = self.subscription_service.get_pricing_info()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            if plan == "pro" and duration == 1:
                amount = pricing["subscriptions"]["pro_monthly"]
                title = "üåü Pro –ø–æ–¥–ø–∏—Å–∫–∞ - –º–µ—Å—è—Ü"
                description = "200 —Ñ–æ—Ç–æ/–º–µ—Å, –º—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞, –≤–∏—Ç–∞–º–∏–Ω—ã, —ç–∫—Å–ø–æ—Ä—Ç, –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
            elif plan == "pro" and duration == 3:
                amount = pricing["subscriptions"]["pro_quarterly"]
                title = "üåü Pro –ø–æ–¥–ø–∏—Å–∫–∞ - 3 –º–µ—Å—è—Ü–∞"
                description = "200 —Ñ–æ—Ç–æ/–º–µ—Å, –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Pro. –í—ã–≥–æ–¥–∞ 33%!"
            elif plan == "pro" and duration == 12:
                amount = pricing["subscriptions"]["pro_yearly"]
                title = "üåü Pro –ø–æ–¥–ø–∏—Å–∫–∞ - –≥–æ–¥"
                description = "200 —Ñ–æ—Ç–æ/–º–µ—Å, –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Pro. –í—ã–≥–æ–¥–∞ 50%!"
            else:
                return {"success": False, "error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏"}
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –¥–ª—è Telegram Payments
            prices = [LabeledPrice(label=title, amount=amount * 100)]  # –í –∫–æ–ø–µ–π–∫–∞—Ö
            
            payload = f"subscription_{plan}_{duration}_{user_id}_{datetime.now().timestamp()}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç
            await self.bot.send_invoice(
                chat_id=user_id,
                title=title,
                description=description,
                payload=payload,
                provider_token=self.PAYMENT_PROVIDER_TOKEN,
                currency="RUB",
                prices=prices,
                max_tip_amount=0,
                suggested_tip_amounts=[],
                photo_url="https://calories.toxiguard.site/og-image.jpg",
                photo_size=512,
                photo_width=512,
                photo_height=512,
                need_name=False,
                need_phone_number=False,
                need_email=False,
                need_shipping_address=False,
                send_phone_number_to_provider=False,
                send_email_to_provider=False,
                is_flexible=False,
            )
            
            return {
                "success": True,
                "payload": payload,
                "amount": amount
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: {e}")
            return {"success": False, "error": str(e)}

    async def process_successful_payment(self, payment_info: Dict) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
        try:
            payload = payment_info.get('invoice_payload', '')
            total_amount = payment_info.get('total_amount', 0)
            
            # –ü–∞—Ä—Å–∏–º payload
            parts = payload.split('_')
            if len(parts) < 4:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload: {payload}")
                return False
            
            payment_type = parts[0]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Stars –ø–ª–∞—Ç–µ–∂–µ–π
            if payment_type == "stars":
                product = parts[1]
                user_id = int(parts[2])
                stars_amount = total_amount  # –î–ª—è Stars amount —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Stars –ø–ª–∞—Ç–µ–∂–µ
                payment_data = {
                    'user_id': user_id,
                    'payment_type': 'stars',
                    'product': product,
                    'stars_amount': stars_amount,
                    'currency': 'XTR',  # Telegram Stars
                    'status': 'completed',
                    'telegram_payment_charge_id': payment_info.get('telegram_payment_charge_id'),
                    'provider_payment_charge_id': payment_info.get('provider_payment_charge_id'),
                    'created_at': datetime.now()
                }
                
                await self.subscription_service.save_payment(payment_data)
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
                success = await self.process_stars_payment(user_id, product, stars_amount)
                
                if success:
                    await self.bot.send_message(
                        user_id,
                        f"üéâ **–ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                        f"‚≠ê –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {stars_amount} Stars\n"
                        f"‚úÖ –¢–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                        f"üì∏ –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!",
                        parse_mode="Markdown"
                    )
                    return True
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Stars –ø–æ–∫—É–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    await self.bot.send_message(
                        user_id,
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏. "
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    )
                    return False
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (RUB)
            elif payment_type == "subscription":
                plan = parts[1]
                duration = int(parts[2])
                user_id = int(parts[3])
                total_amount = total_amount // 100  # –ò–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ä—É–±–ª–∏
            
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                payment_data = {
                    'user_id': user_id,
                    'payment_type': payment_type,
                    'plan': plan,
                    'duration': duration,
                    'amount': total_amount,
                    'currency': 'RUB',
                    'status': 'completed',
                    'telegram_payment_charge_id': payment_info.get('telegram_payment_charge_id'),
                    'provider_payment_charge_id': payment_info.get('provider_payment_charge_id'),
                    'created_at': datetime.now()
                }
            
            await self.subscription_service.save_payment(payment_data)
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            if payment_type == "subscription" and plan == "pro":
                success = await self.subscription_service.activate_pro_subscription(user_id, duration)
                
                if success:
                    await self.bot.send_message(
                        user_id,
                        "üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
                        f"‚úÖ Pro –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {duration} –º–µ—Å.\n"
                        f"üí∞ –°—É–º–º–∞: {total_amount} ‚ÇΩ\n\n"
                        "üåü **–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã:**\n"
                        "‚Ä¢ –î–æ 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü\n"
                        "‚Ä¢ –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥ –Ω–∞ —Ñ–æ—Ç–æ)\n"
                        "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö\n"
                        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF/CSV\n"
                        "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Calendar\n"
                        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å\n\n"
                        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!",
                        parse_mode="Markdown"
                    )
                    return True
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    await self.bot.send_message(
                        user_id,
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. "
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    )
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False

    async def create_stars_payment_invoice(self, user_id: int, product: str, stars_amount: int) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –∑–∞ Telegram Stars"""
        try:
            
            product_names = {
                "extra_10_analyses": "üí´ +10 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤",
                "multi_dish_24h": "üçΩÔ∏è –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ –Ω–∞ 24 —á–∞—Å–∞",  
                "pdf_report": "üìÑ PDF –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é"
            }
            
            product_name = product_names.get(product, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
            title = f"‚≠ê {product_name}"
            description = f"–ü–æ–∫—É–ø–∫–∞ –∑–∞ {stars_amount} Telegram Stars"
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –¥–ª—è Telegram Stars
            prices = [LabeledPrice(label=product_name, amount=stars_amount)]  # –í Stars (–Ω–µ –∫–æ–ø–µ–π–∫–∞—Ö!)
            
            payload = f"stars_{product}_{user_id}_{datetime.now().timestamp()}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –∑–∞ Stars (–≤–∞–ª—é—Ç–∞ XTR = Telegram Stars)
            await self.bot.send_invoice(
                chat_id=user_id,
                title=title,
                description=description,
                payload=payload,
                provider_token="",  # –î–ª—è Stars –Ω–µ –Ω—É–∂–µ–Ω provider_token
                currency="XTR",  # XTR = Telegram Stars
                prices=prices,
                max_tip_amount=0,
                suggested_tip_amounts=[],
                photo_url="https://calories.toxiguard.site/og-image.jpg",
                photo_size=512,
                photo_width=512,
                photo_height=512,
                need_name=False,
                need_phone_number=False,
                need_email=False,
                need_shipping_address=False,
                send_phone_number_to_provider=False,
                send_email_to_provider=False,
                is_flexible=False,
            )
            
            return {
                "success": True,
                "payload": payload,
                "stars_amount": stars_amount
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stars —Å—á–µ—Ç–∞: {e}", exc_info=True)
            error_msg = str(e)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if "PAYMENT_PROVIDER_INVALID" in error_msg:
                error_msg = "–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Stars –ø–ª–∞—Ç–µ–∂–µ–π –≤ BotFather."
            elif "Bad Request" in error_msg:
                error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram: {error_msg}"
            
            return {"success": False, "error": error_msg}

    async def create_stars_payment(self, user_id: int, product: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–∞ Stars"""
        try:
            pricing = self.subscription_service.get_pricing_info()
            stars_prices = pricing["stars"]
            
            if product == "extra_10_analyses":
                price = stars_prices["extra_10_analyses"]
                title = "üí´ +10 –∞–Ω–∞–ª–∏–∑–æ–≤"
                description = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 10 –∞–Ω–∞–ª–∏–∑–æ–≤ –µ–¥—ã"
            elif product == "multi_dish_24h":
                price = stars_prices["multi_dish_24h"]
                title = "üçΩÔ∏è –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ 24—á"
                description = "–ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–ª—é–¥ –Ω–∞ –æ–¥–Ω–æ–º —Ñ–æ—Ç–æ (24 —á–∞—Å–∞)"
            elif product == "pdf_report":
                price = stars_prices["pdf_report"]
                title = "üìÑ PDF –æ—Ç—á–µ—Ç"
                description = "–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é –≤ PDF"
            else:
                return None
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è Stars
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"‚≠ê –ö—É–ø–∏—Ç—å –∑–∞ {price} Stars",
                    callback_data=f"buy_stars_{product}_{price}"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_payment"
                )]
            ])
            
            return keyboard
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stars –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None

    async def process_stars_payment(self, user_id: int, product: str, stars_amount: int) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –∑–∞ Stars"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è Stars —á–µ—Ä–µ–∑ Telegram Bot API
            # –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ API –Ω–µ—Ç –ø—Ä—è–º–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Stars payments
            # –≠—Ç–æ placeholder –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            
            if product == "extra_10_analyses":
                success = await self.subscription_service.add_stars_analyses(user_id, 10)
                if success:
                    await self.bot.send_message(
                        user_id,
                        f"‚úÖ **–ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                        f"üåü –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {stars_amount} Stars\n"
                        f"üí´ –ü–æ–ª—É—á–µ–Ω–æ: +10 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤\n\n"
                        f"üì∏ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ!",
                        parse_mode="Markdown"
                    )
                return success
                
            elif product == "multi_dish_24h":
                # –í—Ä–µ–º–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫—É –Ω–∞ 24 —á–∞—Å–∞
                from firebase_admin import firestore
                user_ref = self.subscription_service.firebase_service.db.collection('users').document(str(user_id))
                
                expire_time = datetime.now() + timedelta(hours=24)
                user_ref.update({
                    'temp_multi_dish_expires': expire_time
                })
                
                await self.bot.send_message(
                    user_id,
                    f"‚úÖ **–ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**\n\n"
                    f"üåü –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {stars_amount} Stars\n"
                    f"üçΩÔ∏è –î–æ—Å—Ç—É–ø: 24 —á–∞—Å–∞\n"
                    f"‚è∞ –î–æ: {expire_time.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"üì∏ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–ª—é–¥–∞–º–∏!",
                    parse_mode="Markdown"
                )
                return True
                
            elif product == "pdf_report":
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –æ—Ç—á–µ—Ç
                await self.bot.send_message(
                    user_id,
                    f"‚úÖ **PDF –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è!**\n\n"
                    f"üåü –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {stars_amount} Stars\n"
                    f"üìÑ –û—Ç—á–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n\n"
                    f"üìß PDF —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç",
                    parse_mode="Markdown"
                )
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stars –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False

    def get_subscription_keyboard(self, current_plan: str = "lite") -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        keyboard_buttons = []
        
        if current_plan == "lite":
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç—Ä–∏–∞–ª
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="üöÄ 7 –¥–Ω–µ–π Pro –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
                    callback_data="start_trial"
                )
            ])
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
        pricing = self.subscription_service.get_pricing_info()
        keyboard_buttons.extend([
            [InlineKeyboardButton(
                text=f"üí≥ Pro –º–µ—Å—è—Ü - {pricing['subscriptions']['pro_monthly']}‚ÇΩ",
                callback_data="buy_pro_1"
            )],
            [InlineKeyboardButton(
                text=f"üí≥ Pro 3 –º–µ—Å - {pricing['subscriptions']['pro_quarterly']}‚ÇΩ (-33%)",
                callback_data="buy_pro_3"
            )],
            [InlineKeyboardButton(
                text=f"üí≥ Pro –≥–æ–¥ - {pricing['subscriptions']['pro_yearly']}‚ÇΩ (-50%)",
                callback_data="buy_pro_12"
            )]
        ])
        
        # Stars –æ–ø—Ü–∏–∏
        keyboard_buttons.extend([
            [InlineKeyboardButton(
                text="‚≠ê –ò–ª–∏ –∫—É–ø–∏—Ç—å –∑–∞ Stars",
                callback_data="stars_options"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_payment"
            )]
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    def get_stars_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–∫—É–ø–∫–∞–º–∏ –∑–∞ Stars"""
        pricing = self.subscription_service.get_pricing_info()
        stars_prices = pricing["stars"]
        
        keyboard_buttons = [
            [InlineKeyboardButton(
                text=f"üí´ +10 –∞–Ω–∞–ª–∏–∑–æ–≤ - {stars_prices['extra_10_analyses']}‚≠ê",
                callback_data="buy_stars_extra_10_analyses"
            )],
            [InlineKeyboardButton(
                text=f"üçΩÔ∏è –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ 24—á - {stars_prices['multi_dish_24h']}‚≠ê",
                callback_data="buy_stars_multi_dish_24h"
            )],
            [InlineKeyboardButton(
                text=f"üìÑ PDF –æ—Ç—á–µ—Ç - {stars_prices['pdf_report']}‚≠ê",
                callback_data="buy_stars_pdf_report"
            )],
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º",
                callback_data="back_to_subscriptions"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_payment"
            )]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
