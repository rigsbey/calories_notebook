import os
import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.gemini_service import GeminiService
from services.google_calendar import GoogleCalendarService
from services.analysis_storage import analysis_storage
from config import TEMP_DIR
from utils import error_handler, format_nutrition_info

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class FoodAnalysisStates(StatesGroup):
    waiting_for_weight = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
gemini_service = GeminiService()
calendar_service = GoogleCalendarService()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

@router.message(Command("start"))
@error_handler
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üçΩÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è!

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã, –∏ —è:
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—é —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞
‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—é –ö–ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–∏
‚Ä¢ –£–∫–∞–∂—É –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Google Calendar

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã!
    """
    await message.answer(welcome_text)

@router.message(F.photo)
@error_handler
async def photo_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –µ–¥—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo = message.photo[-1]
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = await message.bot.get_file(photo.file_id)
        file_extension = file_info.file_path.split('.')[-1]
        file_path = os.path.join(TEMP_DIR, f"food_{message.from_user.id}_{photo.file_id}.{file_extension}")
        
        await message.bot.download_file(file_info.file_path, file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(photo_path=file_path)
        await state.set_state(FoodAnalysisStates.waiting_for_weight)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ –∑–Ω–∞—é"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùì –ù–µ –∑–Ω–∞—é –≥—Ä–∞–º–º–æ–≤–∫—É", callback_data="unknown_weight")]
        ])
        
        await message.answer(
            "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å –µ–¥—ã –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250)\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —Ç–æ—á–Ω—ã–π –≤–µ—Å:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑."
        )

@router.callback_query(F.data == "unknown_weight")
@error_handler
async def unknown_weight_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–µ –∑–Ω–∞—é –≥—Ä–∞–º–º–æ–≤–∫—É'"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    photo_path = data.get('photo_path')
    
    if not photo_path or not os.path.exists(photo_path):
        await callback.message.answer(
            "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –µ–¥—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è—é –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–¥—É —á–µ—Ä–µ–∑ Gemini –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–µ—Å–∞
    analysis_result = await gemini_service.analyze_food_auto_weight(photo_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    analysis_storage.store_analysis(
        user_id=callback.from_user.id,
        analysis_text=analysis_result,
        image_path=photo_path,
        weight=None  # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    formatted_response = format_nutrition_info(analysis_result)
    final_response = f"üçΩÔ∏è **–í–∞—à –ø—Ä–∏–µ–º –ø–∏—â–∏ (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞):**\n\n{formatted_response}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await callback.message.answer(final_response, parse_mode="Markdown")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å Markdown: {e}")
        await callback.message.answer(final_response)
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(photo_path)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.message.answer(
            "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! \n\n"
            "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:\n"
            "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞\"\n"
            "‚Ä¢ \"–í–µ—Å –Ω–µ 450–≥, –∞ 300–≥\"\n"
            "‚Ä¢ \"–î–æ–±–∞–≤—å —Ç—É–¥–∞ –µ—â–µ –ø–æ–º–∏–¥–æ—Ä—ã\"\n\n"
            "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        )

@router.message(FoodAnalysisStates.waiting_for_weight)
@error_handler
async def weight_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Å–∞ –µ–¥—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        try:
            weight = int(message.text.strip())
            if weight <= 0 or weight > 5000:
                await message.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –æ—Ç 1 –¥–æ 5000 –≥—Ä–∞–º–º"
                )
                return
        except ValueError:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250)"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        photo_path = data.get('photo_path')
        
        if not photo_path or not os.path.exists(photo_path):
            await message.answer(
                "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∑–∞–Ω–æ–≤–æ."
            )
            await state.clear()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –µ–¥—ã...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–¥—É —á–µ—Ä–µ–∑ Gemini
        analysis_result = await gemini_service.analyze_food(photo_path, weight)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        analysis_storage.store_analysis(
            user_id=message.from_user.id,
            analysis_text=analysis_result,
            image_path=photo_path,
            weight=weight
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_response = format_nutrition_info(analysis_result)
        final_response = f"üçΩÔ∏è **–í–∞—à –ø—Ä–∏–µ–º –ø–∏—â–∏ ({weight} –≥):**\n\n{formatted_response}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ Markdown —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞)
        try:
            await message.answer(final_response, parse_mode="Markdown")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å Markdown: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Markdown
            await message.answer(final_response)
        
        # Google Calendar –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # await message.answer("üìÖ Google Calendar –æ—Ç–∫–ª—é—á–µ–Ω")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(photo_path)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await message.answer(
            "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:\n"
            "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞\"\n"
            "‚Ä¢ \"–í–µ—Å –Ω–µ 450–≥, –∞ 300–≥\"\n"
            "‚Ä¢ \"–î–æ–±–∞–≤—å —Ç—É–¥–∞ –µ—â–µ –ø–æ–º–∏–¥–æ—Ä—ã\"\n\n"
            "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–µ—Å–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()

@router.message(F.text)
@error_handler
async def text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–∞–≤–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if analysis_storage.has_recent_analysis(user_id):
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑
        last_analysis = analysis_storage.get_last_analysis(user_id)
        
        if last_analysis:
            await message.answer("üîÑ –ò—Å–ø—Ä–∞–≤–ª—è—é –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –∑–∞–º–µ—á–∞–Ω–∏–π...")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Gemini
            corrected_analysis = await gemini_service.correct_analysis(
                original_analysis=last_analysis['analysis_text'],
                user_correction=message.text
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            analysis_storage.update_analysis(user_id, corrected_analysis)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            formatted_response = format_nutrition_info(corrected_analysis)
            weight_info = f" ({last_analysis['weight']} –≥)" if last_analysis['weight'] else " (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞)"
            final_response = f"üîÑ **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑{weight_info}:**\n\n{formatted_response}"
            
            try:
                await message.answer(final_response, parse_mode="Markdown")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å Markdown: {e}")
                await message.answer(final_response)
            
            await message.answer(
                "‚úÖ –ê–Ω–∞–ª–∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                "üí¨ –ù—É–∂–Ω—ã –µ—â–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n"
                "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )
            return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    await message.answer(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!\n\n"
        "üí° –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:\n"
        "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ —à–ø–∏–Ω–∞—Ç\"\n"
        "‚Ä¢ \"–í–µ—Å –Ω–µ 300–≥, –∞ 250–≥\"\n"
        "‚Ä¢ \"–î–æ–±–∞–≤—å —Ç—É–¥–∞ –º–æ—Ä–∫–æ–≤—å\""
    )

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    from commands import commands_router
    dp.include_router(router)
    dp.include_router(commands_router)
