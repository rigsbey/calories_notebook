import logging
from datetime import datetime, timedelta
from typing import Dict, List
from services.firebase_service import FirebaseService
from services.personal_goals_service import PersonalGoalsService
from utils import format_nutrition_info

logger = logging.getLogger(__name__)

class ReportService:
    def __init__(self):
        self.firebase = FirebaseService()
        self.personal_goals = PersonalGoalsService()
    
    async def generate_daily_report(self, user_id: int, date: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç"""
        if not date:
            date = datetime.now().strftime('%Y-%m-%d')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await self.firebase.get_user_info(user_id)
            user_display = self._get_user_display_name(user_info, user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã –∑–∞ –¥–µ–Ω—å
            analyses = await self.firebase.get_daily_analyses(user_id, date)
            
            if not analyses:
                return f"üìÖ –ò—Ç–æ–≥–∏ –¥–Ω—è ({date})\nüë§ {user_display}\n\n‚ùå –ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏."
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            total_nutrition = await self.firebase.aggregate_daily_nutrition(analyses)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = await self._format_daily_report(user_id, date, total_nutrition, len(analyses), user_display)
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ {date}"
    
    async def generate_weekly_report(self, user_id: int, start_date: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        if not start_date:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
            today = datetime.now()
            start_date = (today - timedelta(days=today.weekday())).strftime('%Y-%m-%d')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await self.firebase.get_user_info(user_id)
            user_display = self._get_user_display_name(user_info, user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã –∑–∞ –Ω–µ–¥–µ–ª—é
            analyses = await self.firebase.get_weekly_analyses(user_id, start_date)
            
            if not analyses:
                return f"üìÖ –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ ({start_date})\nüë§ {user_display}\n\n‚ùå –ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –Ω–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏."
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            total_nutrition = await self.firebase.aggregate_daily_nutrition(analyses)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = await self._format_weekly_report(user_id, start_date, total_nutrition, len(analyses), user_display)
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é {start_date}"
    
    def _get_user_display_name(self, user_info: Dict, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user_info:
            return f"ID: {user_id}"
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: username -> first_name -> user_id
        if user_info.get('username'):
            return f"@{user_info['username']}"
        elif user_info.get('first_name'):
            name = user_info['first_name']
            if user_info.get('last_name'):
                name += f" {user_info['last_name']}"
            return name
        else:
            return f"ID: {user_id}"
    
    async def _format_daily_report(self, user_id: int, date: str, nutrition: Dict, analysis_count: int, user_display: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        goal = await self.personal_goals.get_user_goal(user_id)
        
        if goal:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã
            daily_calories = goal.get('daily_calories', 2200)
            goal_type_names = {
                "weight_loss": "üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ",
                "weight_gain": "üìà –ù–∞–±–æ—Ä –≤–µ—Å–∞", 
                "maintenance": "‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞",
                "muscle_gain": "üí™ –ù–∞–±–æ—Ä –º—ã—à—Ü",
                "health_improvement": "üè• –£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"
            }
            goal_name = goal_type_names.get(goal['goal_type'], goal['goal_type'])
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–æ—Ä–º—ã
            daily_calories = 2200
            goal_name = None
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ—Ä–º—ã –ë–ñ–£
        protein_ratio = 0.25 if not goal else 0.25  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Ü–µ–ª—å
        fat_ratio = 0.30 if not goal else 0.30
        carb_ratio = 0.45 if not goal else 0.45
        
        daily_proteins = daily_calories * protein_ratio / 4  # 4 –∫–∫–∞–ª/–≥ –±–µ–ª–∫–∞
        daily_fats = daily_calories * fat_ratio / 9  # 9 –∫–∫–∞–ª/–≥ –∂–∏—Ä–∞
        daily_carbs = daily_calories * carb_ratio / 4  # 4 –∫–∫–∞–ª/–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
        
        report = f"üìÖ –ò—Ç–æ–≥–∏ –¥–Ω—è ({date})\n"
        if user_display:
            report += f"üë§ {user_display}\n"
        if goal_name:
            report += f"üéØ –¶–µ–ª—å: {goal_name}\n"
        report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {analysis_count}\n\n"
        
        # –ö–ë–ñ–£ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –Ω–æ—Ä–º–∞–º–∏
        report += "üî• –ö–∞–ª–æ—Ä–∏–∏: "
        report += f"{nutrition['calories']} –∫–∫–∞–ª (–∏–∑ {daily_calories})\n"
        
        report += "ü•© –ë–µ–ª–∫–∏: "
        report += f"{nutrition['proteins']:.1f} –≥ / {daily_proteins:.1f} –≥\n"
        
        report += "ü•ë –ñ–∏—Ä—ã: "
        report += f"{nutrition['fats']:.1f} –≥ / {daily_fats:.1f} –≥\n"
        
        report += "üåæ –£–≥–ª–µ–≤–æ–¥—ã: "
        report += f"{nutrition['carbs']:.1f} –≥ / {daily_carbs:.1f} –≥\n\n"
        
        # –í–∏—Ç–∞–º–∏–Ω—ã
        if nutrition['vitamins']:
            report += "üíä –í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã:\n"
            for vitamin, percentage in nutrition['vitamins'].items():
                report += f"‚Ä¢ {vitamin}: {percentage}%\n"
        else:
            report += "üíä –í–∏—Ç–∞–º–∏–Ω—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è Pro –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            from services.subscription_service import SubscriptionService
            subscription_service = SubscriptionService()
            subscription = await subscription_service.get_user_subscription(user_id)
            
            if subscription.get('type') in ['pro', 'trial'] and goal:
                recommendations = await self.personal_goals.generate_smart_recommendations(user_id, nutrition)
                if recommendations and "–û—à–∏–±–∫–∞" not in recommendations:
                    report += f"\n{recommendations}"
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –æ—Ç—á–µ—Ç: {e}")
        
        return report
    
    async def _format_weekly_report(self, user_id: int, start_date: str, nutrition: Dict, analysis_count: int, user_display: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        goal = await self.personal_goals.get_user_goal(user_id)
        
        if goal:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã
            daily_calories = goal.get('daily_calories', 2200)
            weekly_calories = daily_calories * 7
            goal_type_names = {
                "weight_loss": "üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ",
                "weight_gain": "üìà –ù–∞–±–æ—Ä –≤–µ—Å–∞", 
                "maintenance": "‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞",
                "muscle_gain": "üí™ –ù–∞–±–æ—Ä –º—ã—à—Ü",
                "health_improvement": "üè• –£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"
            }
            goal_name = goal_type_names.get(goal['goal_type'], goal['goal_type'])
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–æ—Ä–º—ã
            weekly_calories = 2200 * 7
            goal_name = None
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ—Ä–º—ã –ë–ñ–£ –¥–ª—è –Ω–µ–¥–µ–ª–∏
        protein_ratio = 0.25 if not goal else 0.25
        fat_ratio = 0.30 if not goal else 0.30
        carb_ratio = 0.45 if not goal else 0.45
        
        weekly_proteins = weekly_calories * protein_ratio / 4
        weekly_fats = weekly_calories * fat_ratio / 9
        weekly_carbs = weekly_calories * carb_ratio / 4
        
        report = f"üìÖ –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ ({start_date})\n"
        if user_display:
            report += f"üë§ {user_display}\n"
        if goal_name:
            report += f"üéØ –¶–µ–ª—å: {goal_name}\n"
        report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {analysis_count}\n\n"
        
        # –ö–ë–ñ–£ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –Ω–æ—Ä–º–∞–º–∏
        report += "üî• –ö–∞–ª–æ—Ä–∏–∏: "
        report += f"{nutrition['calories']} –∫–∫–∞–ª (–∏–∑ {weekly_calories})\n"
        
        report += "ü•© –ë–µ–ª–∫–∏: "
        report += f"{nutrition['proteins']:.1f} –≥ / {weekly_proteins:.1f} –≥\n"
        
        report += "ü•ë –ñ–∏—Ä—ã: "
        report += f"{nutrition['fats']:.1f} –≥ / {weekly_fats:.1f} –≥\n"
        
        report += "üåæ –£–≥–ª–µ–≤–æ–¥—ã: "
        report += f"{nutrition['carbs']:.1f} –≥ / {weekly_carbs:.1f} –≥\n\n"
        
        # –í–∏—Ç–∞–º–∏–Ω—ã
        if nutrition['vitamins']:
            report += "üíä –í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã:\n"
            for vitamin, percentage in nutrition['vitamins'].items():
                report += f"‚Ä¢ {vitamin}: {percentage}%\n"
        else:
            report += "üíä –í–∏—Ç–∞–º–∏–Ω—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è Pro –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            from services.subscription_service import SubscriptionService
            subscription_service = SubscriptionService()
            subscription = await subscription_service.get_user_subscription(user_id)
            
            if subscription.get('type') in ['pro', 'trial'] and goal:
                # –î–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = await self.personal_goals.get_goal_progress(user_id, 7)
                if progress and 'error' not in progress:
                    avg_calories = progress.get('avg_calories', 0)
                    calorie_accuracy = progress.get('calorie_accuracy', 0)
                    
                    report += f"\nüìä **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –Ω–µ–¥–µ–ª—é:**\n"
                    report += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å: {avg_calories:.0f}\n"
                    report += f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º: {calorie_accuracy:.1f}%\n"
                    
                    if calorie_accuracy < 80:
                        report += f"üí° **–°–æ–≤–µ—Ç:** –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π\n"
                    elif calorie_accuracy > 120:
                        report += f"üí° **–°–æ–≤–µ—Ç:** –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –∫–∞–ª–æ—Ä–∏–π\n"
                    else:
                        report += f"‚úÖ **–û—Ç–ª–∏—á–Ω–æ!** –í—ã –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ—Å—å –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π\n"
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {e}")
        
        return report
    
    async def send_daily_reports_to_all_users(self, bot):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            users = await self.firebase.get_all_users()
            date = datetime.now().strftime('%Y-%m-%d')
            
            for user_id in users:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    user_info = await self.firebase.get_user_info(user_id)
                    user_display = self._get_user_display_name(user_info, user_id)
                    
                    report = await self.generate_daily_report(user_id, date)
                    await bot.send_message(user_id, report)
                    logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_display} (ID: {user_id})")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            logger.info(f"–î–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    async def send_daily_reports_to_users(self, bot, users):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            date = datetime.now().strftime('%Y-%m-%d')
            
            for user in users:
                try:
                    user_id = user['user_id']
                    user_display = self._get_user_display_name(user, user_id)
                    
                    report = await self.generate_daily_report(user_id, date)
                    await bot.send_message(user_id, report)
                    logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_display} (ID: {user_id})")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            logger.info(f"–î–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")


