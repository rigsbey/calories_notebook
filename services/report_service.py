import logging
from datetime import datetime, timedelta
from typing import Dict, List
from services.firebase_service import FirebaseService
from utils import format_nutrition_info

logger = logging.getLogger(__name__)

class ReportService:
    def __init__(self):
        self.firebase = FirebaseService()
    
    async def generate_daily_report(self, user_id: int, date: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç"""
        if not date:
            date = datetime.now().strftime('%Y-%m-%d')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã –∑–∞ –¥–µ–Ω—å
            analyses = await self.firebase.get_daily_analyses(user_id, date)
            
            if not analyses:
                return f"üìÖ –ò—Ç–æ–≥–∏ –¥–Ω—è ({date})\n\n‚ùå –ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏."
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            total_nutrition = await self.firebase.aggregate_daily_nutrition(analyses)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self._format_daily_report(date, total_nutrition, len(analyses))
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ {date}"
    
    async def generate_weekly_report(self, user_id: int, start_date: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        if not start_date:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
            today = datetime.now()
            start_date = (today - timedelta(days=today.weekday())).strftime('%Y-%m-%d')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã –∑–∞ –Ω–µ–¥–µ–ª—é
            analyses = await self.firebase.get_weekly_analyses(user_id, start_date)
            
            if not analyses:
                return f"üìÖ –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ ({start_date})\n\n‚ùå –ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –Ω–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏."
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            total_nutrition = await self.firebase.aggregate_daily_nutrition(analyses)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self._format_weekly_report(start_date, total_nutrition, len(analyses))
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é {start_date}"
    
    def _format_daily_report(self, date: str, nutrition: Dict, analysis_count: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç"""
        # –ù–æ—Ä–º—ã –¥–ª—è –≤–∑—Ä–æ—Å–ª–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
        daily_norms = {
            'calories': 2200,
            'proteins': 120,
            'fats': 75,
            'carbs': 250
        }
        
        report = f"üìÖ –ò—Ç–æ–≥–∏ –¥–Ω—è ({date})\n"
        report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {analysis_count}\n\n"
        
        # –ö–ë–ñ–£
        report += "üî• –ö–∞–ª–æ—Ä–∏–∏: "
        report += f"{nutrition['calories']} –∫–∫–∞–ª (–∏–∑ {daily_norms['calories']})\n"
        
        report += "ü•© –ë–µ–ª–∫–∏: "
        report += f"{nutrition['proteins']:.1f} –≥ / {daily_norms['proteins']} –≥\n"
        
        report += "ü•ë –ñ–∏—Ä—ã: "
        report += f"{nutrition['fats']:.1f} –≥ / {daily_norms['fats']} –≥\n"
        
        report += "üåæ –£–≥–ª–µ–≤–æ–¥—ã: "
        report += f"{nutrition['carbs']:.1f} –≥ / {daily_norms['carbs']} –≥\n\n"
        
        # –í–∏—Ç–∞–º–∏–Ω—ã
        if nutrition['vitamins']:
            report += "üíä –í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã:\n"
            for vitamin, percentage in nutrition['vitamins'].items():
                report += f"‚Ä¢ {vitamin}: {percentage}%\n"
        else:
            report += "üíä –í–∏—Ç–∞–º–∏–Ω—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n"
        
        return report
    
    def _format_weekly_report(self, start_date: str, nutrition: Dict, analysis_count: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        # –ù–æ—Ä–º—ã –¥–ª—è –Ω–µ–¥–µ–ª–∏ (—É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 7)
        weekly_norms = {
            'calories': 2200 * 7,
            'proteins': 120 * 7,
            'fats': 75 * 7,
            'carbs': 250 * 7
        }
        
        report = f"üìÖ –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ ({start_date})\n"
        report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {analysis_count}\n\n"
        
        # –ö–ë–ñ–£
        report += "üî• –ö–∞–ª–æ—Ä–∏–∏: "
        report += f"{nutrition['calories']} –∫–∫–∞–ª (–∏–∑ {weekly_norms['calories']})\n"
        
        report += "ü•© –ë–µ–ª–∫–∏: "
        report += f"{nutrition['proteins']:.1f} –≥ / {weekly_norms['proteins']} –≥\n"
        
        report += "ü•ë –ñ–∏—Ä—ã: "
        report += f"{nutrition['fats']:.1f} –≥ / {weekly_norms['fats']} –≥\n"
        
        report += "üåæ –£–≥–ª–µ–≤–æ–¥—ã: "
        report += f"{nutrition['carbs']:.1f} –≥ / {weekly_norms['carbs']} –≥\n\n"
        
        # –í–∏—Ç–∞–º–∏–Ω—ã
        if nutrition['vitamins']:
            report += "üíä –í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã:\n"
            for vitamin, percentage in nutrition['vitamins'].items():
                report += f"‚Ä¢ {vitamin}: {percentage}%\n"
        else:
            report += "üíä –í–∏—Ç–∞–º–∏–Ω—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n"
        
        return report
    
    async def send_daily_reports_to_all_users(self, bot):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            users = await self.firebase.get_all_users()
            date = datetime.now().strftime('%Y-%m-%d')
            
            for user_id in users:
                try:
                    report = await self.generate_daily_report(user_id, date)
                    await bot.send_message(user_id, report)
                    logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            logger.info(f"–î–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
