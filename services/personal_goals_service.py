import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from enum import Enum
from services.firebase_service import FirebaseService
from services.gemini_service import GeminiService

logger = logging.getLogger(__name__)

class GoalType(Enum):
    WEIGHT_LOSS = "weight_loss"
    WEIGHT_GAIN = "weight_gain" 
    MAINTENANCE = "maintenance"
    MUSCLE_GAIN = "muscle_gain"
    HEALTH_IMPROVEMENT = "health_improvement"

class PersonalGoalsService:
    def __init__(self):
        self.firebase_service = FirebaseService()
        self.gemini_service = GeminiService()
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ü–µ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É –ø–ª–∞–Ω—É
        self.GOAL_CONFIG = {
            GoalType.WEIGHT_LOSS: {
                "name": "üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ",
                "deficit_percent": 0.175,  # 17.5% –¥–µ—Ñ–∏—Ü–∏—Ç (15-20% —Å—Ä–µ–¥–Ω–µ–µ)
                "protein_per_kg": 2.2,     # 2.2–≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞
                "fat_percent": 0.25,       # 25% –∂–∏—Ä–æ–≤
                "carbs_percent": 0.35,     # 35% —É–≥–ª–µ–≤–æ–¥–æ–≤ (–º–µ–Ω—å—à–µ –¥–ª—è –¥–µ—Ñ–∏—Ü–∏—Ç–∞)
                "description": "–î–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–æ—Ö—É–¥–µ–Ω–∏—è",
                "free_features": [
                    "–†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π",
                    "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º",
                    "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–æ—Ä–º–µ"
                ],
                "premium_features": [
                    "–ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é",
                    "–°–æ–≤–µ—Ç—ã –∫–∞–∫ –Ω–µ —Å—Ä—ã–≤–∞—Ç—å—Å—è",
                    "–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏ (–¥–µ—Ñ–∏—Ü–∏—Ç –¥–Ω–µ–π)",
                    "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –±–µ–ª–∫—É"
                ]
            },
            GoalType.WEIGHT_GAIN: {
                "name": "üìà –ù–∞–±–æ—Ä –≤–µ—Å–∞", 
                "surplus_percent": 0.175,  # 17.5% –ø—Ä–æ—Ñ–∏—Ü–∏—Ç (15-20% —Å—Ä–µ–¥–Ω–µ–µ)
                "protein_per_kg": 1.8,     # 1.8–≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞
                "fat_percent": 0.30,       # 30% –∂–∏—Ä–æ–≤ (–±–æ–ª—å—à–µ –¥–ª—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏)
                "carbs_percent": 0.50,     # 50% —É–≥–ª–µ–≤–æ–¥–æ–≤ (–±–æ–ª—å—à–µ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏)
                "description": "–ü—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –≤–µ—Å–∞",
                "free_features": [
                    "–†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π",
                    "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º"
                ],
                "premium_features": [
                    "–°–æ–≤–µ—Ç—ã –ø–æ –≤—ã—Å–æ–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º",
                    "–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏ (–¥–Ω–∏ —Å –ø—Ä–æ—Ñ–∏—Ü–∏—Ç–æ–º)",
                    "–ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞",
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–∫—É—Å–∞–º"
                ]
            },
            GoalType.MAINTENANCE: {
                "name": "‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞",
                "deficit_percent": 0,      # –±–µ–∑ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç–∞
                "surplus_percent": 0,
                "protein_per_kg": 1.6,     # 1.6–≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞
                "fat_percent": 0.30,       # 30% –∂–∏—Ä–æ–≤
                "carbs_percent": 0.45,     # 45% —É–≥–ª–µ–≤–æ–¥–æ–≤
                "description": "–ë–∞–ª–∞–Ω—Å –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞",
                "free_features": [
                    "–†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π",
                    "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–ª–æ—Ä–∏–π"
                ],
                "premium_features": [
                    "–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Ü–∏–æ–Ω–∞",
                    "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π (¬±10%)",
                    "–°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–∏—Ç–∞–Ω–∏—è",
                    "–¢—Ä–µ–Ω–¥ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–µ—Å–∞"
                ]
            },
            GoalType.MUSCLE_GAIN: {
                "name": "üí™ –ù–∞–±–æ—Ä –º—ã—à—Ü",
                "surplus_percent": 0.125,  # 12.5% –ø—Ä–æ—Ñ–∏—Ü–∏—Ç (10-15% —Å—Ä–µ–¥–Ω–µ–µ)
                "protein_per_kg": 2.0,     # 2–≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞
                "fat_percent": 0.25,       # 25% –∂–∏—Ä–æ–≤
                "carbs_percent": 0.50,     # 50% —É–≥–ª–µ–≤–æ–¥–æ–≤ (–¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏)
                "description": "–ü—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –±–µ–ª–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –º—ã—à—Ü",
                "free_features": [
                    "–†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π",
                    "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–µ–ª–∫–∞"
                ],
                "premium_features": [
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏",
                    "–°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é –¥–æ/–ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                    "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –±–µ–ª–∫—É",
                    "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
                ]
            },
            GoalType.HEALTH_IMPROVEMENT: {
                "name": "üè• –£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è",
                "deficit_percent": 0,      # –±–µ–∑ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç–∞
                "surplus_percent": 0,
                "protein_per_kg": 1.6,     # 1.6–≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞
                "fat_percent": 0.30,       # 30% –∂–∏—Ä–æ–≤
                "carbs_percent": 0.45,     # 45% —É–≥–ª–µ–≤–æ–¥–æ–≤
                "description": "–§–æ–∫—É—Å –Ω–∞ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö, –º–∏–Ω–µ—Ä–∞–ª–∞—Ö –∏ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∏—Ç–∞–Ω–∏—è",
                "free_features": [
                    "–†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π",
                    "–ë–∞–∑–æ–≤—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã (C, –∫–∞–ª—å—Ü–∏–π)"
                ],
                "premium_features": [
                    "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤–∏—Ç–∞–º–∏–Ω–∞–º –∏ –º–∏–Ω–µ—Ä–∞–ª–∞–º",
                    "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º",
                    "–ò—Å—Ç–æ—Ä–∏—è –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é",
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º"
                ]
            }
        }

    async def set_user_goal(self, user_id: int, goal_type: str, target_weight: Optional[float] = None, 
                           current_weight: Optional[float] = None, height: Optional[float] = None,
                           age: Optional[int] = None, activity_level: str = "moderate", 
                           gender: str = "male") -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–∏–ø —Ü–µ–ª–∏
            try:
                goal_enum = GoalType(goal_type)
            except ValueError:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ü–µ–ª–∏: {goal_type}")
                return False
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
            daily_calories, macro_nutrients = await self._calculate_daily_calories(
                current_weight, height, age, activity_level, goal_enum, gender
            )
            
            goal_config = self.GOAL_CONFIG[goal_enum]
            
            goal_data = {
                'goal_type': goal_type,
                'goal_name': goal_config['name'],
                'description': goal_config['description'],
                'target_weight': target_weight,
                'current_weight': current_weight,
                'height': height,
                'age': age,
                'gender': gender,
                'activity_level': activity_level,
                'daily_calories': daily_calories,
                'macro_nutrients': macro_nutrients,
                'free_features': goal_config['free_features'],
                'premium_features': goal_config['premium_features'],
                'goal_set_at': datetime.now(),
                'last_updated': datetime.now()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
            user_ref = self.firebase_service.db.collection('users').document(str(user_id))
            user_ref.set({
                'personal_goal': goal_data
            }, merge=True)
            
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–ª—å {goal_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏: {e}")
            return False

    async def _calculate_daily_calories(self, weight: Optional[float], height: Optional[float], 
                                      age: Optional[int], activity_level: str, goal_type: GoalType, 
                                      gender: str = "male") -> Tuple[int, Dict]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ"""
        try:
            if not all([weight, height, age]):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
                tdee = 2000
            else:
                # –§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
                if gender.lower() == "female":
                    bmr = 10 * weight + 6.25 * height - 5 * age - 161
                else:  # male
                    bmr = 10 * weight + 6.25 * height - 5 * age + 5
                
                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                activity_multipliers = {
                    "sedentary": 1.2,    # –º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π
                    "light": 1.375,      # –ª–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    "moderate": 1.55,    # —É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    "active": 1.725,     # –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    "very_active": 1.9   # –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                }
                
                multiplier = activity_multipliers.get(activity_level, 1.55)
                tdee = int(bmr * multiplier)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
            goal_config = self.GOAL_CONFIG[goal_type]
            
            if goal_config.get('deficit_percent', 0) > 0:
                # –î–µ—Ñ–∏—Ü–∏—Ç –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è
                deficit = int(tdee * goal_config['deficit_percent'])
                daily_calories = tdee - deficit
            elif goal_config.get('surplus_percent', 0) > 0:
                # –ü—Ä–æ—Ñ–∏—Ü–∏—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞ –≤–µ—Å–∞/–º—ã—à—Ü
                surplus = int(tdee * goal_config['surplus_percent'])
                daily_calories = tdee + surplus
            else:
                # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞
                daily_calories = tdee
            
            daily_calories = max(daily_calories, 1200)  # –ú–∏–Ω–∏–º—É–º 1200 –∫–∞–ª–æ—Ä–∏–π
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ë–ñ–£ —Å–æ–≥–ª–∞—Å–Ω–æ —Ü–µ–ª–∏
            target_proteins = weight * goal_config['protein_per_kg'] if weight else 120
            target_fats = daily_calories * goal_config['fat_percent'] / 9  # 9 –∫–∫–∞–ª/–≥ –∂–∏—Ä–∞
            target_carbs = daily_calories * goal_config['carbs_percent'] / 4  # 4 –∫–∫–∞–ª/–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
            
            macro_nutrients = {
                'proteins': round(target_proteins, 1),
                'fats': round(target_fats, 1), 
                'carbs': round(target_carbs, 1)
            }
            
            return daily_calories, macro_nutrients
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π: {e}")
            return 2000, {'proteins': 120, 'fats': 67, 'carbs': 225}

    async def get_user_goal(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_data = await self.firebase_service.get_user_info(user_id)
            return user_data.get('personal_goal')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–∏: {e}")
            return None

    async def generate_smart_recommendations(self, user_id: int, daily_nutrition: Dict, is_premium: bool = False) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏ –∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"""
        try:
            goal = await self.get_user_goal(user_id)
            if not goal:
                return "üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!"
            
            goal_type = GoalType(goal['goal_type'])
            daily_calories = goal.get('daily_calories', 2000)
            macro_nutrients = goal.get('macro_nutrients', {})
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –ø–∏—Ç–∞–Ω–∏–µ
            current_calories = daily_nutrition.get('calories', 0)
            current_proteins = daily_nutrition.get('proteins', 0)
            current_fats = daily_nutrition.get('fats', 0)
            current_carbs = daily_nutrition.get('carbs', 0)
            
            recommendations = []
            
            # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            calorie_percent = (current_calories / daily_calories * 100) if daily_calories > 0 else 0
            
            if calorie_percent < 70:
                recommendations.append(f"üìà –í—ã –Ω–∞ {calorie_percent:.0f}% –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–π –ø–µ—Ä–µ–∫—É—Å!")
            elif calorie_percent > 130:
                recommendations.append(f"üìâ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –Ω–æ—Ä–º—É –Ω–∞ {calorie_percent-100:.0f}%. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ª–µ–≥–∫–∏–π —É–∂–∏–Ω.")
            
            # Premium —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if is_premium:
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ë–ñ–£
                target_proteins = macro_nutrients.get('proteins', 120)
                target_fats = macro_nutrients.get('fats', 67)
                target_carbs = macro_nutrients.get('carbs', 225)
                
                if current_proteins < target_proteins * 0.8:
                    protein_diff = target_proteins - current_proteins
                    recommendations.append(f"ü•© –ú–∞–ª–æ –±–µ–ª–∫–∞! –î–æ–±–∞–≤—å—Ç–µ {protein_diff:.0f}–≥: –∫—É—Ä–∏—Ü–∞, —Ç–≤–æ—Ä–æ–≥, —è–π—Ü–∞.")
                
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–ª–∏
                if goal_type == GoalType.WEIGHT_LOSS:
                    if current_calories > daily_calories:
                        recommendations.append("üí™ –î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è: –±–æ–ª—å—à–µ –±–µ–ª–∫–∞, –º–µ–Ω—å—à–µ –ø—Ä–æ—Å—Ç—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤.")
                    recommendations.append("üß† –°–æ–≤–µ—Ç: –ø–µ–π—Ç–µ –≤–æ–¥—É –ø–µ—Ä–µ–¥ –µ–¥–æ–π, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞–ø–ø–µ—Ç–∏—Ç.")
                    
                elif goal_type == GoalType.WEIGHT_GAIN:
                    if current_calories < daily_calories * 0.9:
                        recommendations.append("ü•ú –î–ª—è –Ω–∞–±–æ—Ä–∞ –≤–µ—Å–∞: –¥–æ–±–∞–≤—å—Ç–µ –æ—Ä–µ—Ö–∏, –∞–≤–æ–∫–∞–¥–æ, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ.")
                        
                elif goal_type == GoalType.MUSCLE_GAIN:
                    if current_proteins < target_proteins:
                        recommendations.append("üí™ –î–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à—Ü: –±–µ–ª–æ–∫ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –∫–ª—é—á –∫ —Ä–æ—Å—Ç—É!")
                        
                elif goal_type == GoalType.HEALTH_IMPROVEMENT:
                    recommendations.append("ü•¨ –§–æ–∫—É—Å –Ω–∞ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö: –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤.")
                    
                # –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è Premium
                ai_recommendations = await self._generate_ai_recommendations(
                    goal_type, daily_nutrition, goal
                )
                if ai_recommendations:
                    recommendations.append(ai_recommendations)
            else:
                # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è Free
                recommendations.append("‚≠ê –í Pro –≤–µ—Ä—Å–∏–∏: –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ò–ò –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ë–ñ–£!")
            
            if not recommendations:
                return "‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ! –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏!"
            
            return "ü§ñ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n\n" + "\n".join(f"‚Ä¢ {rec}" for rec in recommendations)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    async def _generate_ai_recommendations(self, goal_type: GoalType, nutrition: Dict, goal: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ò–ò"""
        try:
            prompt = f"""
–¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∏—Ç–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–¶–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {goal_type.value}
–¢–µ–∫—É—â–µ–µ –ø–∏—Ç–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å:
- –ö–∞–ª–æ—Ä–∏–∏: {nutrition.get('calories', 0)}
- –ë–µ–ª–∫–∏: {nutrition.get('proteins', 0)}–≥
- –ñ–∏—Ä—ã: {nutrition.get('fats', 0)}–≥  
- –£–≥–ª–µ–≤–æ–¥—ã: {nutrition.get('carbs', 0)}–≥

–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {goal.get('daily_calories', 2000)}

–î–∞–π 1-2 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏. 
–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏.
–ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
"""
            
            response = await self.gemini_service.generate_text(prompt)
            return response.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return ""

    async def get_goal_progress(self, user_id: int, days: int = 7) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            goal = await self.get_user_goal(user_id)
            if not goal:
                return {"error": "–¶–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"}
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days)
            
            analyses = await self.firebase_service.get_weekly_analyses(
                user_id, start_date.strftime('%Y-%m-%d')
            )
            
            if not analyses:
                return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥"}
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            total_nutrition = await self.firebase_service.aggregate_daily_nutrition(analyses)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            avg_calories = total_nutrition['calories'] / days
            avg_proteins = total_nutrition['proteins'] / days
            avg_fats = total_nutrition['fats'] / days
            avg_carbs = total_nutrition['carbs'] / days
            
            daily_target = goal.get('daily_calories', 2000)
            
            progress = {
                'period_days': days,
                'avg_calories': round(avg_calories, 0),
                'avg_proteins': round(avg_proteins, 1),
                'avg_fats': round(avg_fats, 1),
                'avg_carbs': round(avg_carbs, 1),
                'calorie_target': daily_target,
                'calorie_accuracy': round((avg_calories / daily_target) * 100, 1),
                'goal_type': goal['goal_type'],
                'analyses_count': len(analyses)
            }
            
            return progress
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return {"error": "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"}

    async def can_use_personal_goals(self, user_id: int) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π"""
        try:
            from services.subscription_service import SubscriptionService
            subscription_service = SubscriptionService()
            
            subscription = await subscription_service.get_user_subscription(user_id)
            subscription_type = subscription.get('type', 'lite')
            
            if subscription_type == 'lite':
                return False, "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Pro"
            
            return True, ""
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–µ–ª—è–º: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"

    async def get_goal_info(self, goal_type: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏"""
        try:
            goal_enum = GoalType(goal_type)
            return self.GOAL_CONFIG.get(goal_enum)
        except ValueError:
            return None

    async def get_daily_progress_summary(self, user_id: int, daily_nutrition: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞ –¥–µ–Ω—å"""
        try:
            goal = await self.get_user_goal(user_id)
            if not goal:
                return "üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!"
            
            daily_calories = goal.get('daily_calories', 2000)
            current_calories = daily_nutrition.get('calories', 0)
            calorie_percent = (current_calories / daily_calories * 100) if daily_calories > 0 else 0
            
            goal_name = goal.get('goal_name', '–¶–µ–ª—å')
            
            if calorie_percent >= 90 and calorie_percent <= 110:
                status = "‚úÖ –û—Ç–ª–∏—á–Ω–æ!"
            elif calorie_percent < 70:
                status = f"üìà –ù–µ–¥–æ–±–æ—Ä {100-calorie_percent:.0f}%"
            elif calorie_percent > 130:
                status = f"üìâ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ {calorie_percent-100:.0f}%"
            else:
                status = "üëç –•–æ—Ä–æ—à–æ!"
            
            return f"üéØ **{goal_name}**\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {calorie_percent:.0f}% ({current_calories}/{daily_calories} –∫–∫–∞–ª)\n{status}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"

    async def get_weekly_analysis(self, user_id: int, days: int = 7) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏"""
        try:
            goal = await self.get_user_goal(user_id)
            if not goal:
                return {"error": "–¶–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"}
            
            goal_type = GoalType(goal['goal_type'])
            goal_config = self.GOAL_CONFIG[goal_type]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
            from datetime import datetime, timedelta
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days)
            
            analyses = await self.firebase_service.get_weekly_analyses(
                user_id, start_date.strftime('%Y-%m-%d')
            )
            
            if not analyses:
                return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥"}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–Ω—è–º
            daily_target = goal.get('daily_calories', 2000)
            success_days = 0
            
            for analysis in analyses:
                daily_calories = analysis.get('calories', 0)
                if goal_type == GoalType.WEIGHT_LOSS:
                    # –î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –¥–µ–Ω—å —Å –¥–µ—Ñ–∏—Ü–∏—Ç–æ–º
                    if daily_calories <= daily_target:
                        success_days += 1
                elif goal_type in [GoalType.WEIGHT_GAIN, GoalType.MUSCLE_GAIN]:
                    # –î–ª—è –Ω–∞–±–æ—Ä–∞ –≤–µ—Å–∞/–º—ã—à—Ü —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –¥–µ–Ω—å —Å –ø—Ä–æ—Ñ–∏—Ü–∏—Ç–æ–º
                    if daily_calories >= daily_target:
                        success_days += 1
                else:
                    # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∏ –∑–¥–æ—Ä–æ–≤—å—è —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –¥–µ–Ω—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±10%
                    if 0.9 * daily_target <= daily_calories <= 1.1 * daily_target:
                        success_days += 1
            
            success_rate = (success_days / len(analyses)) * 100
            
            analysis = {
                'goal_name': goal_config['name'],
                'goal_type': goal_type.value,
                'period_days': len(analyses),
                'success_days': success_days,
                'success_rate': round(success_rate, 1),
                'daily_target': daily_target,
                'avg_calories': round(sum(a.get('calories', 0) for a in analyses) / len(analyses), 0)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏
            if goal_type == GoalType.WEIGHT_LOSS:
                analysis['deficit_days'] = success_days
                analysis['message'] = f"–í—ã –±—ã–ª–∏ –≤ –¥–µ—Ñ–∏—Ü–∏—Ç–µ {success_days} –∏–∑ {len(analyses)} –¥–Ω–µ–π"
            elif goal_type in [GoalType.WEIGHT_GAIN, GoalType.MUSCLE_GAIN]:
                analysis['surplus_days'] = success_days
                analysis['message'] = f"–í—ã –¥–æ–±—Ä–∞–ª–∏ –∫–∞–ª–æ—Ä–∏–∏ {success_days} –∏–∑ {len(analyses)} –¥–Ω–µ–π"
            else:
                analysis['balanced_days'] = success_days
                analysis['message'] = f"–í—ã –¥–µ—Ä–∂–∞–ª–∏ –±–∞–ª–∞–Ω—Å {success_days} –∏–∑ {len(analyses)} –¥–Ω–µ–π"
            
            return analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {"error": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"}
