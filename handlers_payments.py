import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from services.subscription_service import SubscriptionService
from services.payment_service import PaymentService
from utils import error_handler

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
payments_router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
subscription_service = SubscriptionService()
payment_service = PaymentService()

@payments_router.message(Command("pro"))
@error_handler
async def pro_info_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Pro –ø–æ–¥–ø–∏—Å–∫–µ"""
    subscription = await subscription_service.get_user_subscription(message.from_user.id)
    current_plan = subscription['type']
    
    if current_plan == "pro":
        await message.answer(
            "üåü **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å Pro –ø–æ–¥–ø–∏—Å–∫–∞!**\n\n"
            "‚úÖ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
            "‚Ä¢ –î–æ 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü\n"
            "‚Ä¢ –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥)\n"
            "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF/CSV\n"
            "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Calendar\n"
            "‚Ä¢ –ü–æ–ª–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å\n\n"
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!",
            parse_mode="Markdown"
        )
        return
    
    elif current_plan == "trial":
        await message.answer(
            "üöÄ **–£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω 7-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–∏–∞–ª Pro!**\n\n"
            "‚úÖ **–î–æ—Å—Ç—É–ø–Ω–æ –≤—Å—ë Pro:**\n"
            "‚Ä¢ –î–æ 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü\n"
            "‚Ä¢ –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞\n"
            "‚Ä¢ –í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n\n"
            "üìÖ –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–∏–∞–ª–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "üì∏ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Pro –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
            parse_mode="Markdown"
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ–π–≤–æ–ª–ª –¥–ª—è Lite –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await show_paywall(
        message,
        title="üåü –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Pro?",
        description="–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è:",
        features=[
            "‚Ä¢ –î–æ 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü",
            "‚Ä¢ –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥)",
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã", 
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF/CSV",
            "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Calendar",
            "‚Ä¢ –ü–æ–ª–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü",
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å"
        ]
    )

@payments_router.callback_query(F.data == "show_paywall")
@error_handler
async def generic_paywall_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ–π–≤–æ–ª–ª"""
    await callback.answer()
    
    await show_paywall(
        callback.message,
        title="‚≠ê –õ–∏–º–∏—Ç Lite –∏—Å—á–µ—Ä–ø–∞–Ω",
        description="üöÄ **Pro** –æ—Ç–∫—Ä–æ–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:",
        features=[
            "‚Ä¢ –î–æ 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü –≤–º–µ—Å—Ç–æ 5/–¥–µ–Ω—å",
            "‚Ä¢ –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥)", 
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã + —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã",
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF/CSV",
            "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Calendar",
            "‚Ä¢ –ü–æ–ª–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é",
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å"
        ]
    )

async def show_paywall(message_or_callback, title: str, description: str, features: list):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–µ–π–≤–æ–ª–ª–∞"""
    subscription = await subscription_service.get_user_subscription(message_or_callback.from_user.id)
    current_plan = subscription['type']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"{title}\n\n{description}\n\n" + "\n".join(features)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    daily_count = subscription['daily_photo_count']
    text += f"\n\nüìä **–°–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {daily_count}/5 —Ñ–æ—Ç–æ"
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    keyboard = payment_service.get_subscription_keyboard(current_plan)
    
    if hasattr(message_or_callback, 'edit_text'):
        await message_or_callback.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
    else:
        await message_or_callback.answer(text, parse_mode="Markdown", reply_markup=keyboard)

@payments_router.callback_query(F.data == "start_trial")
@payments_router.callback_query(F.data == "start_pro_trial")
@error_handler 
async def start_trial_handler(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ 7-–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç—Ä–∏–∞–ª–∞"""
    await callback.answer()
    
    success = await subscription_service.start_trial(callback.from_user.id)
    
    if success:
        await callback.message.edit_text(
            "üéâ **–¢—Ä–∏–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            "‚úÖ **7 –¥–Ω–µ–π Pro –±–µ—Å–ø–ª–∞—Ç–Ω–æ**\n"
            "üåü –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Pro —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã\n"
            "üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n\n"
            "**–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ:**\n"
            "‚Ä¢ –î–æ 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü\n"
            "‚Ä¢ –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞\n"
            "‚Ä¢ –í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF/CSV\n"
            "‚Ä¢ Google Calendar\n\n"
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!",
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚ùå **–¢—Ä–∏–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –¢—Ä–∏–∞–ª —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞\n\n"
            "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É:",
            parse_mode="Markdown",
            reply_markup=payment_service.get_subscription_keyboard("lite")
        )

@payments_router.callback_query(F.data.startswith("buy_pro_"))
@payments_router.callback_query(F.data == "buy_pro_monthly")
@payments_router.callback_query(F.data == "buy_pro_annual")
@error_handler
async def buy_pro_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ Pro –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –∏–∑ callback_data
    if callback.data == "buy_pro_monthly":
        duration = 1
    elif callback.data == "buy_pro_annual":
        duration = 12
    else:
        duration = int(callback.data.split("_")[-1])
    
    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã
    result = await payment_service.create_subscription_payment(
        callback.from_user.id, 
        "pro", 
        duration
    )
    
    if result["success"]:
        await callback.message.edit_text(
            "üí≥ **–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: Pro –ø–æ–¥–ø–∏—Å–∫–∞ ({duration} –º–µ—Å.)\n"
            f"üí∞ –°—É–º–º–∞: {result['amount']} ‚ÇΩ\n\n"
            "üîí –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π Telegram Payments\n"
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã",
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞:\n{result['error']}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="show_paywall")]
            ])
        )

@payments_router.callback_query(F.data == "stars_options")
@error_handler
async def stars_options_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∫—É–ø–æ–∫ –∑–∞ Stars"""
    await callback.answer()
    
    keyboard = payment_service.get_stars_keyboard()
    
    await callback.message.edit_text(
        "‚≠ê **–ü–æ–∫—É–ø–∫–∏ –∑–∞ Stars**\n\n"
        "üåü Stars ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ Telegram\n"
        "üí´ –ü–æ–∫—É–ø–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
        "üöÄ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏:**\n"
        "üí´ **+10 –∞–Ω–∞–ª–∏–∑–æ–≤** ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ\n"
        "üçΩÔ∏è **–ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ 24—á** ‚Äî –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥ –Ω–∞ —Ñ–æ—Ç–æ\n"
        "üìÑ **PDF –æ—Ç—á–µ—Ç** ‚Äî –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@payments_router.callback_query(F.data.startswith("buy_stars_"))
@error_handler
async def buy_stars_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫ –∑–∞ Stars"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ callback_data
    product = callback.data.replace("buy_stars_", "")
    
    # –ü–æ–∫–∞ Telegram Stars API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    pricing = subscription_service.get_pricing_info()
    price = pricing["stars"].get(product, 0)
    
    product_names = {
        "extra_10_analyses": "üí´ +10 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤",
        "multi_dish_24h": "üçΩÔ∏è –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ –Ω–∞ 24 —á–∞—Å–∞",  
        "pdf_report": "üìÑ PDF –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é"
    }
    
    product_name = product_names.get(product, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –∑–∞ Stars
    result = await payment_service.create_stars_payment_invoice(
        callback.from_user.id, 
        product, 
        price
    )
    
    if result["success"]:
        await callback.message.edit_text(
            f"‚≠ê **–ü–æ–∫—É–ø–∫–∞ –∑–∞ Stars**\n\n"
            f"üõí –¢–æ–≤–∞—Ä: {product_name}\n"
            f"üí∞ –¶–µ–Ω–∞: {price} Stars\n\n"
            f"‚úÖ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {product_name}.\n\n"
            f"üí≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—ã—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É Pro:",
            parse_mode="Markdown",
            reply_markup=payment_service.get_subscription_keyboard("lite")
        )

@payments_router.callback_query(F.data == "back_to_subscriptions")
@error_handler
async def back_to_subscriptions_handler(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    await show_paywall(
        callback.message,
        title="üåü –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É",
        description="–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Pro:",
        features=[
            "‚Ä¢ –î–æ 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü",
            "‚Ä¢ –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞",
            "‚Ä¢ –í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã",
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF/CSV", 
            "‚Ä¢ Google Calendar",
            "‚Ä¢ –ü–æ–ª–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"
        ]
    )

@payments_router.callback_query(F.data == "show_status")
@error_handler
async def show_status_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ callback"""
    await callback.answer()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ handlers.py
    from handlers import status_handler
    await status_handler(callback.message)

@payments_router.callback_query(F.data == "cancel_payment")
@error_handler
async def cancel_payment_handler(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚ùå **–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
        "üì∏ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω Lite\n"
        "üåü –ò–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /pro",
        parse_mode="Markdown"
    )

@payments_router.pre_checkout_query()
@error_handler
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await pre_checkout_query.answer(ok=True)
        logger.info(f"Pre-checkout OK –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {pre_checkout_query.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ pre-checkout: {e}")
        await pre_checkout_query.answer(
            ok=False, 
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@payments_router.message(F.successful_payment)
@error_handler
async def successful_payment_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_info = {
            'invoice_payload': message.successful_payment.invoice_payload,
            'total_amount': message.successful_payment.total_amount,
            'telegram_payment_charge_id': message.successful_payment.telegram_payment_charge_id,
            'provider_payment_charge_id': message.successful_payment.provider_payment_charge_id,
        }
        
        success = await payment_service.process_successful_payment(payment_info)
        
        if not success:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å ID –ø–ª–∞—Ç–µ–∂–∞: "
                f"{payment_info['telegram_payment_charge_id']}"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. "
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
