import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from services.firebase_service import FirebaseService
from services.subscription_service import SubscriptionService

logger = logging.getLogger(__name__)

class ConversionOptimizationService:
    def __init__(self):
        self.firebase_service = FirebaseService()
        self.subscription_service = SubscriptionService()
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        self.CONVERSION_TRIGGERS = {
            "first_analysis": {
                "message": "üéâ **–ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n‚ú® –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
                "cta": "üöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Pro –±–µ—Å–ø–ª–∞—Ç–Ω–æ 7 –¥–Ω–µ–π!",
                "features": ["‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã", "‚Ä¢ –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞", "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤"]
            },
            "limit_reached": {
                "message": "üìä **–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω**\n\nüòä –í—ã —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ 5 —Ñ–æ—Ç–æ —Å–µ–≥–æ–¥–Ω—è!",
                "cta": "üåü Pro —Å–Ω–∏–º–µ—Ç –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è!",
                "features": ["‚Ä¢ –î–æ 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü", "‚Ä¢ –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞", "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏"]
            },
            "streak_motivation": {
                "message": "üî• **–û—Ç–ª–∏—á–Ω–∞—è —Å–µ—Ä–∏—è!**\n\n–í—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ –µ–¥—É —É–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!",
                "cta": "üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å Pro!",
                "features": ["‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", "‚Ä¢ –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏—è"]
            },
            "weekend_reminder": {
                "message": "üìÖ **–í—ã—Ö–æ–¥–Ω—ã–µ - –≤—Ä–µ–º—è –¥–ª—è —Å–µ–±—è!**\n\n–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º!",
                "cta": "üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å –≤ Pro!",
                "features": ["‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏", "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò", "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å"]
            }
        }

    async def get_user_conversion_context(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await self.firebase_service.get_user_info(user_id)
            subscription = await self.subscription_service.get_user_subscription(user_id)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            today = datetime.now().strftime('%Y-%m-%d')
            week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            
            today_analyses = await self.firebase_service.get_daily_analyses(user_id, today)
            week_analyses = await self.firebase_service.get_weekly_analyses(user_id, week_ago)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ—Ä–∏—é –¥–Ω–µ–π
            streak_days = await self._calculate_streak_days(user_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ç—Ä–∏–≥–≥–µ—Ä
            best_trigger = await self._determine_best_trigger(
                user_id, subscription, len(today_analyses), len(week_analyses), streak_days
            )
            
            return {
                "user_id": user_id,
                "subscription_type": subscription.get('type', 'lite'),
                "daily_count": len(today_analyses),
                "weekly_count": len(week_analyses),
                "streak_days": streak_days,
                "best_trigger": best_trigger,
                "is_weekend": datetime.now().weekday() >= 5,
                "is_first_time": len(week_analyses) <= 1
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {e}")
            return {
                "user_id": user_id,
                "subscription_type": "lite",
                "daily_count": 0,
                "weekly_count": 0,
                "streak_days": 0,
                "best_trigger": "first_analysis",
                "is_weekend": False,
                "is_first_time": True
            }

    async def _calculate_streak_days(self, user_id: int) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏"""
        try:
            streak = 0
            current_date = datetime.now().date()
            
            for i in range(30):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
                check_date = current_date - timedelta(days=i)
                analyses = await self.firebase_service.get_daily_analyses(
                    user_id, check_date.strftime('%Y-%m-%d')
                )
                
                if analyses:
                    streak += 1
                else:
                    break
            
            return streak
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–µ—Ä–∏–∏ –¥–Ω–µ–π: {e}")
            return 0

    async def _determine_best_trigger(self, user_id: int, subscription: Dict, 
                                    daily_count: int, weekly_count: int, streak_days: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à–∏–π —Ç—Ä–∏–≥–≥–µ—Ä –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
        try:
            subscription_type = subscription.get('type', 'lite')
            
            # –ï—Å–ª–∏ —É–∂–µ Pro, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
            if subscription_type in ['pro', 'trial']:
                return "none"
            
            # –ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—É-—ç—Ñ—Ñ–µ–∫—Ç
            if weekly_count <= 1:
                return "first_analysis"
            
            # –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ–π–≤–æ–ª–ª
            if daily_count >= 5:
                return "limit_reached"
            
            # –•–æ—Ä–æ—à–∞—è —Å–µ—Ä–∏—è - –º–æ—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
            if streak_days >= 3:
                return "streak_motivation"
            
            # –í—ã—Ö–æ–¥–Ω—ã–µ - –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ —Ü–µ–ª—è—Ö
            if datetime.now().weekday() >= 5:
                return "weekend_reminder"
            
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑
            return "first_analysis"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            return "first_analysis"

    async def generate_personalized_paywall(self, user_id: int) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ–π–≤–æ–ª–ª"""
        try:
            context = await self.get_user_conversion_context(user_id)
            
            if context["best_trigger"] == "none":
                return None
            
            trigger_config = self.CONVERSION_TRIGGERS[context["best_trigger"]]
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            personalized_message = await self._personalize_message(trigger_config, context)
            
            return {
                "title": personalized_message["title"],
                "description": personalized_message["description"],
                "features": personalized_message["features"],
                "cta": personalized_message["cta"],
                "urgency": personalized_message.get("urgency", False),
                "context": context
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ–π–≤–æ–ª–ª–∞: {e}")
            return None

    async def _personalize_message(self, trigger_config: Dict, context: Dict) -> Dict:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            base_message = trigger_config["message"]
            base_cta = trigger_config["cta"]
            base_features = trigger_config["features"]
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if context["best_trigger"] == "first_analysis":
                title = "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
                description = f"{base_message}\n\nüåü **Pro** –æ—Ç–∫—Ä–æ–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:"
                urgency = False
                
            elif context["best_trigger"] == "limit_reached":
                title = "üìä –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω"
                description = f"{base_message}\n\n‚è∞ –õ–∏–º–∏—Ç —Å–±—Ä–æ—Å–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 00:00\n\nüåü **Pro** —Å–Ω–∏–º–µ—Ç –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"
                urgency = True
                
            elif context["best_trigger"] == "streak_motivation":
                title = "üî• –û—Ç–ª–∏—á–Ω–∞—è —Å–µ—Ä–∏—è!"
                description = f"{base_message}\n\nüìà –£–∂–µ {context['streak_days']} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!\n\nüí™ **Pro** –ø–æ–º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏:"
                urgency = False
                
            elif context["best_trigger"] == "weekend_reminder":
                title = "üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ - –≤—Ä–µ–º—è –¥–ª—è —Å–µ–±—è!"
                description = f"{base_message}\n\nüéØ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –∑–¥–æ—Ä–æ–≤–æ–º –ø–∏—Ç–∞–Ω–∏–∏!\n\nüåü **Pro** –¥–æ–±–∞–≤–∏—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏:"
                urgency = False
                
            else:
                title = "üåü –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Pro?"
                description = f"{base_message}\n\nüåü **Pro** –æ—Ç–∫—Ä–æ–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:"
                urgency = False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏—á–∏
            personalized_features = base_features.copy()
            
            if context["streak_days"] >= 3:
                personalized_features.append("‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
            
            if context["weekly_count"] >= 5:
                personalized_features.append("‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤")
            
            if context["is_weekend"]:
                personalized_features.append("‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            
            return {
                "title": title,
                "description": description,
                "features": personalized_features,
                "cta": base_cta,
                "urgency": urgency
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {
                "title": "üåü –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Pro?",
                "description": "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è:",
                "features": ["‚Ä¢ –î–æ 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü", "‚Ä¢ –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞", "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏"],
                "cta": "üöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Pro –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
                "urgency": False
            }

    async def track_conversion_event(self, user_id: int, event_type: str, data: Dict = None):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
        try:
            event_data = {
                "user_id": user_id,
                "event_type": event_type,
                "timestamp": datetime.now(),
                "data": data or {}
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
            events_ref = self.firebase_service.db.collection('conversion_events')
            events_ref.add(event_data)
            
            logger.info(f"–°–æ–±—ã—Ç–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –æ—Ç—Å–ª–µ–∂–µ–Ω–æ: {event_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {e}")

    async def get_conversion_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            thirty_days_ago = datetime.now() - timedelta(days=30)
            
            events_ref = self.firebase_service.db.collection('conversion_events')
            query = events_ref.where('timestamp', '>=', thirty_days_ago)
            docs = query.stream()
            
            events = []
            for doc in docs:
                events.append(doc.to_dict())
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_events = len(events)
            unique_users = len(set(event['user_id'] for event in events))
            
            event_types = {}
            for event in events:
                event_type = event['event_type']
                event_types[event_type] = event_types.get(event_type, 0) + 1
            
            return {
                "period_days": 30,
                "total_events": total_events,
                "unique_users": unique_users,
                "event_types": event_types,
                "conversion_rate": unique_users / max(total_events, 1) * 100
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {e}")
            return {
                "period_days": 30,
                "total_events": 0,
                "unique_users": 0,
                "event_types": {},
                "conversion_rate": 0
            }
