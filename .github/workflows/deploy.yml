name: Deploy Calories Bot

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Deploy to server
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # Создаем директории если их нет
          mkdir -p /opt/calories-bot/{logs,temp_photos}
          
          # Переходим в рабочую директорию
          cd /opt/calories-bot
          
          # Создаем docker-compose файл с правильными настройками
          cat > docker-compose.prod.yml << 'DOCKEREOF'
          version: '3.8'
          
          services:
            calories-bot:
              image: ghcr.io/rigsbey/calories_notebook:latest
              container_name: calories-bot
              restart: unless-stopped
              environment:
                - BOT_TOKEN=8289791710:AAF7Q6oTSbBHMbqtR1eGMGyQTwlZcXXRYuw
                - GEMINI_API_KEY=${GEMINI_API_KEY}
                - FIREBASE_CREDENTIALS_PATH=caloriesbot-949dd-firebase-adminsdk-fbsvc-4ecc1b1ad9.json
                - GOOGLE_CREDENTIALS_PATH=credentials.json
              volumes:
                - /opt/calories-bot/logs:/app/logs
                - /opt/calories-bot/temp_photos:/app/temp_photos
                - /opt/calories-bot/caloriesbot-949dd-firebase-adminsdk-fbsvc-4ecc1b1ad9.json:/app/caloriesbot-949dd-firebase-adminsdk-fbsvc-4ecc1b1ad9.json
              logging:
                driver: "json-file"
                options:
                  max-size: "10m"
                  max-file: "3"
          DOCKEREOF
          
          # Создаем .env файл с секретами
          cat > .env <<EOF
          BOT_TOKEN=8289791710:AAF7Q6oTSbBHMbqtR1eGMGyQTwlZcXXRYuw
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          FIREBASE_CREDENTIALS_PATH=caloriesbot-949dd-firebase-adminsdk-fbsvc-4ecc1b1ad9.json
          GOOGLE_CREDENTIALS_PATH=credentials.json
          EOF
          
          # Создаем Firebase ключ из секрета
          echo '${{ secrets.FIREBASE_CREDENTIALS }}' > caloriesbot-949dd-firebase-adminsdk-fbsvc-4ecc1b1ad9.json
          
          # Устанавливаем правильные права
          chmod -R 777 logs temp_photos
          
          # Останавливаем старый контейнер
          docker-compose -f docker-compose.prod.yml down || true
          
          # Удаляем старый образ
          docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || true
          
          # Запускаем новый контейнер
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d
          
          # Проверяем статус
          docker-compose -f docker-compose.prod.yml ps
          
          # Показываем логи
          sleep 5
          docker-compose -f docker-compose.prod.yml logs --tail 10
