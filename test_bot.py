import asyncio
import logging
import os
import atexit

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Gemini API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ü–ï–†–ï–î –∏–º–ø–æ—Ä—Ç–æ–º –º–æ–¥—É–ª–µ–π
os.environ["GEMINI_API_KEY"] = "AIzaSyAfF657E3lChR6whEdf1Rzw8eqJrrSR-qg"

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from handlers import register_handlers
from config import TEMP_DIR
from utils import setup_logging, clean_temp_files

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

async def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    BOT_TOKEN = "8368637397:AAHeOqbS4KlrYhDiKQNJr8HsHxZcyLBNLYE"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Gemini API –∫–ª—é—á–∞
    from config import GEMINI_API_KEY
    if not GEMINI_API_KEY:
        logger.error("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ env_example.txt –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    os.makedirs(TEMP_DIR, exist_ok=True)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    clean_temp_files(TEMP_DIR)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    atexit.register(lambda: clean_temp_files(TEMP_DIR))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_handlers(dp)
    
    logger.info("ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
