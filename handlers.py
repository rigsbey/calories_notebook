import os
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.gemini_service import GeminiService
from services.google_calendar import GoogleCalendarService
from services.analysis_storage import analysis_storage
from services.firebase_service import FirebaseService
from services.subscription_service import SubscriptionService
from services.personal_goals_service import PersonalGoalsService
from services.export_service import ExportService
from config import TEMP_DIR
from utils import error_handler, format_nutrition_info, extract_meal_title

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class FoodAnalysisStates(StatesGroup):
    waiting_for_weight = State()

class PersonalGoalStates(StatesGroup):
    waiting_for_goal_type = State()
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_age = State()
    waiting_for_activity = State()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ò—Ç–æ–≥–∏ –¥–Ω—è"), KeyboardButton(text="üìà –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏")],
            [KeyboardButton(text="üì∏ –ê–Ω–∞–ª–∏–∑ –µ–¥—ã"), KeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")],
            [KeyboardButton(text="üéØ –¶–µ–ª–∏"), KeyboardButton(text="‚≠ê Pro")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

async def get_calendar_connect_keyboard(user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Calendar"""
    try:
        auth_url = await calendar_service.get_auth_url(user_id)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar", url=auth_url)]
        ])
        return keyboard
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
gemini_service = GeminiService()
calendar_service = GoogleCalendarService()
firebase_service = FirebaseService()
subscription_service = SubscriptionService()
personal_goals_service = PersonalGoalsService()
export_service = ExportService()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–ï–î FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏)
@router.message(Command("cancel"))
@error_handler
async def cancel_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM"""
    await state.clear()
    await message.answer(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.",
        reply_markup=get_main_keyboard()
    )

@router.message(Command("gdisconnect"))
@error_handler
async def gdisconnect_handler(message: Message, state: FSMContext):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ Google Calendar –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        connected = await calendar_service.ensure_connected(message.from_user.id)
        
        if not connected:
            keyboard = await get_calendar_connect_keyboard(message.from_user.id)
            await message.answer(
                "‚ùå Google Calendar –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n\n"
                "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π –ø–∏—Ç–∞–Ω–∏—è:",
                reply_markup=keyboard
            )
            return
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        await calendar_service.disconnect_user(message.from_user.id)
        await message.answer(
            "‚úÖ Google Calendar –æ—Ç–∫–ª—é—á–µ–Ω.\n\n"
            "–°–æ–±—ã—Ç–∏—è –ø–∏—Ç–∞–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å.",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("help"))
@error_handler
async def help_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    help_text = """
ü§ñ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∫–∞–ª–æ—Ä–∏–π - —É–º–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è**

**üì∏ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ë–ñ–£
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –º–∏–Ω–µ—Ä–∞–ª–∞—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –≤ Google Calendar

**üìä –ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ `/day` - –∏—Ç–æ–≥–∏ –¥–Ω—è
‚Ä¢ `/week` - –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ (Pro)
‚Ä¢ `/summary` - —Å–≤–æ–¥–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ `/goals` - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ (Pro)
‚Ä¢ `/recommendations` - —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (Pro)
‚Ä¢ `/export` - —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ (Pro)
‚Ä¢ `/cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

**üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å:**
‚Ä¢ `/gconnect` - –ø–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar
‚Ä¢ `/gstatus` - —Å—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è
‚Ä¢ `/gdisconnect` - –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å

**‚≠ê Pro —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏
‚Ä¢ –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

**üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/cancel` –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    
    await message.answer(help_text, parse_mode="Markdown", reply_markup=get_main_keyboard())

@router.message(Command("start"))
@error_handler
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    await firebase_service.create_or_update_user(
        user_id=user_id,
        username=username,
        first_name=first_name,
        last_name=last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_subscription = await subscription_service.get_user_subscription(user_id)
    subscription_type = user_subscription.get('type', 'lite') if user_subscription else 'lite'

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∫–∞–ª–æ—Ä–∏–π!**

–ü—Ä–∏–≤–µ—Ç, {first_name}! üëã

–Ø —É–º–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É –ø–æ —Ñ–æ—Ç–æ
‚Ä¢ üìä –°—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã
‚Ä¢ üíä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã
‚Ä¢ üìÖ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –≤ Google Calendar

**–í–∞—à —Å—Ç–∞—Ç—É—Å:** {subscription_type.upper()}

**üöÄ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã
2. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å
3. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑!

**üí° –°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/help` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π.
    """
    
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=get_main_keyboard())
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    if subscription_type == 'lite':
        limit_text = "üìä **Lite (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)**: 5 —Ñ–æ—Ç–æ –≤ –¥–µ–Ω—å, –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ö–ë–ñ–£"
        upgrade_text = "\nüí° –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Pro —Å –º—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–æ–π, –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–æ–º!"
    elif subscription_type in ['trial', 'pro']:
        limit_text = "‚≠ê **Pro**: –î–æ 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü + –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!"
        upgrade_text = ""
    else:
        limit_text = "üìä **Lite (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)**: 5 —Ñ–æ—Ç–æ –≤ –¥–µ–Ω—å, –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ö–ë–ñ–£"
        upgrade_text = "\nüí° –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Pro —Å –º—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–æ–π, –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–æ–º!"
    
    welcome_text = f"""
üçΩÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è!

{limit_text}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã, –∏ —è:
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—é —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞
‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—é –ö–ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–∏
‚Ä¢ –£–∫–∞–∂—É –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ (Pro)
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Google Calendar (Pro)

üìÖ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤!

{upgrade_text}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!
    """
    await message.answer(welcome_text, reply_markup=get_main_keyboard(), parse_mode='Markdown')

@router.message(F.photo)
@error_handler
async def photo_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –µ–¥—ã"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
        can_analyze, limit_message = await subscription_service.can_analyze_photo(user_id)
        if not can_analyze:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
            subscription = await subscription_service.get_user_subscription(user_id)
            daily_count = subscription.get('daily_photo_count', 0)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ–π–≤–æ–ª–ª —Å –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            from handlers_payments import show_paywall
            await show_paywall(
                message,
                title="üì∏ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω",
                description=f"üòä –í—ã —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ {daily_count} —Ñ–æ—Ç–æ —Å–µ–≥–æ–¥–Ω—è!\n\n‚è∞ –õ–∏–º–∏—Ç —Å–±—Ä–æ—Å–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 00:00\n\nüåü **Pro** —Å–Ω–∏–º–µ—Ç –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:",
                features=[
                    "‚Ä¢ –î–æ 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü",
                    "‚Ä¢ –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥)",
                    "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ —Å–æ–≤–µ—Ç—ã", 
                    "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF/CSV",
                    "‚Ä¢ Google Calendar –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
                ]
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        
        await firebase_service.create_or_update_user(
            user_id=user_id,
            username=username,
            first_name=first_name,
            last_name=last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo = message.photo[-1]
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = await message.bot.get_file(photo.file_id)
        file_extension = file_info.file_path.split('.')[-1]
        file_path = os.path.join(TEMP_DIR, f"food_{message.from_user.id}_{photo.file_id}.{file_extension}")
        
        await message.bot.download_file(file_info.file_path, file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(photo_path=file_path)
        await state.set_state(FoodAnalysisStates.waiting_for_weight)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∏
        can_multi_dish, multi_message = await subscription_service.can_use_feature(user_id, "multi_dish")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard_buttons = [[InlineKeyboardButton(text="‚ùì –ù–µ –∑–Ω–∞—é –≥—Ä–∞–º–º–æ–≤–∫—É", callback_data="unknown_weight")]]
        
        if can_multi_dish:
            keyboard_buttons.append([InlineKeyboardButton(text="üçΩÔ∏è –ù–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥ –Ω–∞ —Ñ–æ—Ç–æ", callback_data="multi_dish")])
        else:
            keyboard_buttons.append([InlineKeyboardButton(text="üåü –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ (Pro)", callback_data="multi_dish_paywall")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(
            "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å –µ–¥—ã –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250)\n"
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑."
        )

@router.callback_query(F.data == "unknown_weight")
@error_handler
async def unknown_weight_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–µ –∑–Ω–∞—é –≥—Ä–∞–º–º–æ–≤–∫—É'"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    photo_path = data.get('photo_path')
    
    if not photo_path or not os.path.exists(photo_path):
        await callback.message.answer(
            "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –µ–¥—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è—é –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–¥—É —á–µ—Ä–µ–∑ Gemini –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–µ—Å–∞
    analysis_result = await gemini_service.analyze_food_auto_weight(photo_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_id = callback.from_user.id if callback.from_user else None
    if user_id is not None:
        analysis_storage.store_analysis(
            user_id=user_id,
            analysis_text=analysis_result,
            image_path=photo_path,
            weight=None  # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞
        )
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
        user_id = callback.from_user.id
        if user_id is not None:
            analysis_data = {
                'analysis_text': analysis_result,
                'weight': 'auto',
                'user_id': str(user_id)
            }
            analysis_id = await firebase_service.save_analysis(user_id, analysis_data)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    formatted_response = format_nutrition_info(analysis_result)
    final_response = f"üçΩÔ∏è **–í–∞—à –ø—Ä–∏–µ–º –ø–∏—â–∏ (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞):**\n\n{formatted_response}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await callback.message.answer(final_response, parse_mode="Markdown")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å Markdown: {e}")
        await callback.message.answer(final_response)
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(photo_path)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω)
    event_id = None
    try:
        if calendar_service:
            title = extract_meal_title(analysis_result)
            success = await calendar_service.create_meal_event(
                user_id=user_id,
                title=title,
                description=formatted_response,
                event_time=callback.message.date
            )
            if success:
                # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                # (—ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å ID –∏–∑ create_meal_event)
                event_id = "latest"  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {e}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(F.data == "multi_dish_paywall")
@error_handler
async def multi_dish_paywall_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ–π–≤–æ–ª–ª–∞ –¥–ª—è –º—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∏"""
    await callback.answer()
    
    from handlers_payments import show_paywall
    await show_paywall(
        callback.message,
        title="üçΩÔ∏è –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ Pro",
        description="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥ –Ω–∞ –æ–¥–Ω–æ–º —Ñ–æ—Ç–æ:",
        features=[
            "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ",
            "‚Ä¢ –ö–ë–ñ–£ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞",
            "‚Ä¢ –û–±—â–∏–π –ø–æ–¥—Å—á–µ—Ç –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "‚Ä¢ + –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Pro",
            "‚Ä¢ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        ]
    )

@router.callback_query(F.data == "multi_dish")
@error_handler
async def multi_dish_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –º—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è Pro)"""
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
    can_use, message = await subscription_service.can_use_feature(callback.from_user.id, "multi_dish")
    if not can_use:
        from handlers_payments import show_paywall
        await show_paywall(
            callback.message,
            title="üçΩÔ∏è –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
            description=message,
            features=[
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–ª—é–¥ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
                "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –ö–ë–ñ–£ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞",
                "‚Ä¢ –û–±—â–∞—è –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å"
            ]
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    photo_path = data.get('photo_path')
    
    if not photo_path or not os.path.exists(photo_path):
        await callback.message.answer(
            "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–ª—é–¥–∞–º–∏...")
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–æ–≤
    await subscription_service.increment_photo_count(callback.from_user.id)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –º—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∏
    # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤ gemini_service –¥–ª—è –º—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∏
    analysis_result = await gemini_service.analyze_food_auto_weight(photo_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    user_id = callback.from_user.id
    analysis_storage.store_analysis(
        user_id=user_id,
        analysis_text=analysis_result,
        image_path=photo_path,
        weight=None,
        is_multi_dish=True
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
    analysis_data = {
        'analysis_text': analysis_result,
        'weight': 'multi_dish',
        'user_id': str(user_id),
        'is_multi_dish': True
    }
    await firebase_service.save_analysis(user_id, analysis_data)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    formatted_response = format_nutrition_info(analysis_result)
    final_response = f"üçΩÔ∏è **–ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ –∞–Ω–∞–ª–∏–∑:**\n\n{formatted_response}"
    
    try:
        await callback.message.answer(final_response, parse_mode="Markdown")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å Markdown: {e}")
        await callback.message.answer(final_response)
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(photo_path)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.message.answer(
        "‚úÖ **–ú—É–ª—å—Ç–∏-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
        "üçΩÔ∏è –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –±–ª—é–¥–∞ –Ω–∞ —Ñ–æ—Ç–æ\n"
        "üí¨ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º\n"
        "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ",
        parse_mode="Markdown"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    try:
        connected = await calendar_service.ensure_connected(callback.from_user.id)
        if connected:
            calendar_status = "\n‚úÖ **–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Calendar!**"
            await callback.message.answer(
                f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!{calendar_status}\n\n"
                "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:\n"
                "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞\"\n"
                "‚Ä¢ \"–í–µ—Å –Ω–µ 450–≥, –∞ 300–≥\"\n"
                "‚Ä¢ \"–î–æ–±–∞–≤—å —Ç—É–¥–∞ –µ—â–µ –ø–æ–º–∏–¥–æ—Ä—ã\"\n\n"
                "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
                parse_mode="Markdown"
            )
        else:
            calendar_status = "\nüìÖ **–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar** –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤"
            keyboard = await get_calendar_connect_keyboard(callback.from_user.id)
            await callback.message.answer(
                f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!{calendar_status}\n\n"
                "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:\n"
                "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞\"\n"
                "‚Ä¢ \"–í–µ—Å –Ω–µ 450–≥, –∞ 300–≥\"\n"
                "‚Ä¢ \"–î–æ–±–∞–≤—å —Ç—É–¥–∞ –µ—â–µ –ø–æ–º–∏–¥–æ—Ä—ã\"\n\n"
                "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        calendar_status = "\nüìÖ **–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar** –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤"
        keyboard = await get_calendar_connect_keyboard(callback.from_user.id)
        await callback.message.answer(
            f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!{calendar_status}\n\n"
            "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:\n"
            "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞\"\n"
            "‚Ä¢ \"–í–µ—Å –Ω–µ 450–≥, –∞ 300–≥\"\n"
            "‚Ä¢ \"–î–æ–±–∞–≤—å —Ç—É–¥–∞ –µ—â–µ –ø–æ–º–∏–¥–æ—Ä—ã\"\n\n"
            "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

@router.message(FoodAnalysisStates.waiting_for_weight)
@error_handler
async def weight_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Å–∞ –µ–¥—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        try:
            weight = int(message.text.strip())
            if weight <= 0 or weight > 5000:
                await message.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –æ—Ç 1 –¥–æ 5000 –≥—Ä–∞–º–º"
                )
                return
        except ValueError:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250)"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        photo_path = data.get('photo_path')
        
        if not photo_path or not os.path.exists(photo_path):
            await message.answer(
                "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∑–∞–Ω–æ–≤–æ."
            )
            await state.clear()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –µ–¥—ã...")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–æ–≤
        await subscription_service.increment_photo_count(message.from_user.id)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–¥—É —á–µ—Ä–µ–∑ Gemini
        analysis_result = await gemini_service.analyze_food(photo_path, weight)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        subscription = await subscription_service.get_user_subscription(message.from_user.id)
        subscription_type = subscription['type']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user_id = message.from_user.id if message.from_user else None
        if user_id is not None:
            analysis_storage.store_analysis(
                user_id=user_id,
                analysis_text=analysis_result,
                image_path=photo_path,
                weight=weight
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
        user_id = message.from_user.id
        if user_id is not None:
            analysis_data = {
                'analysis_text': analysis_result,
                'weight': str(weight),
                'user_id': str(user_id),
                'subscription_type': subscription_type
            }
            await firebase_service.save_analysis(user_id, analysis_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_response = format_nutrition_info(analysis_result)
        final_response = f"üçΩÔ∏è **–í–∞—à –ø—Ä–∏–µ–º –ø–∏—â–∏ ({weight} –≥):**\n\n{formatted_response}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ Markdown —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞)
        try:
            await message.answer(final_response, parse_mode="Markdown")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å Markdown: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Markdown
            await message.answer(final_response)
        
        # Google Calendar –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # await message.answer("üìÖ Google Calendar –æ—Ç–∫–ª—é—á–µ–Ω")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω)
        try:
            if calendar_service:
                title = extract_meal_title(analysis_result)
                await calendar_service.create_meal_event(
                    user_id=user_id,
                    title=title,
                    description=formatted_response,
                    event_time=callback.message.date
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(photo_path)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            connected = await calendar_service.ensure_connected(message.from_user.id)
            if connected:
                calendar_status = "\n‚úÖ **–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Calendar!**"
                    # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
                if subscription_type == "lite":
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ —Ä–µ–∫–ª–∞–º—É Pro
                    daily_count = subscription['daily_photo_count']
                    remaining = 5 - daily_count
                    
                    pro_teaser = ""
                    if remaining <= 2:
                        pro_teaser = f"\n\nüåü **–û—Å—Ç–∞–ª–æ—Å—å {remaining} –∞–Ω–∞–ª–∏–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è**\n" \
                                   "‚Ä¢ Pro: –¥–æ 200 —Ñ–æ—Ç–æ/–º–µ—Å + –º—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞\n" \
                                   "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /pro –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"
                    elif daily_count == 1:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–≤–∞—É-—ç—Ñ—Ñ–µ–∫—Ç" –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        pro_teaser = "\n\n‚ú® **–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –∞–Ω–∞–ª–∏–∑?**\n" \
                                   "üåü –í Pro: –¥–µ—Ç–∞–ª—å–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã, —ç–∫—Å–ø–æ—Ä—Ç, –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n" \
                                   "üöÄ –ü–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ: /pro"
                    elif daily_count == 0:
                        # –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        pro_teaser = "\n\nüéØ **–ù–∞—á–Ω–∏—Ç–µ –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é!**\n" \
                                   "üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –µ–¥—É –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"
                    
                    await message.answer(
                        f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!{calendar_status}{pro_teaser}\n\n"
                        "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:\n"
                        "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞\"\n"
                        "‚Ä¢ \"–í–µ—Å –Ω–µ 450–≥, –∞ 300–≥\"\n\n"
                        "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                        parse_mode="Markdown"
                    )
                else:
                    # Pro/Trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    await message.answer(
                        f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!{calendar_status}\n\n"
                        "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:\n"
                        "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞\"\n"
                        "‚Ä¢ \"–í–µ—Å –Ω–µ 450–≥, –∞ 300–≥\"\n"
                        "‚Ä¢ \"–î–æ–±–∞–≤—å —Ç—É–¥–∞ –µ—â–µ –ø–æ–º–∏–¥–æ—Ä—ã\"\n\n"
                        "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
                        parse_mode="Markdown"
                    )
            else:
                calendar_status = "\nüìÖ **–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar** –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤"
                keyboard = await get_calendar_connect_keyboard(message.from_user.id)
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
                if subscription_type == "lite":
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ —Ä–µ–∫–ª–∞–º—É Pro
                    daily_count = subscription['daily_photo_count']
                    remaining = 5 - daily_count
                    
                    pro_teaser = ""
                    if remaining <= 2:
                        pro_teaser = f"\n\nüåü **–û—Å—Ç–∞–ª–æ—Å—å {remaining} –∞–Ω–∞–ª–∏–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è**\n" \
                                   "‚Ä¢ Pro: –¥–æ 200 —Ñ–æ—Ç–æ/–º–µ—Å + –º—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞\n" \
                                   "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /pro –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"
                    elif daily_count == 1:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–≤–∞—É-—ç—Ñ—Ñ–µ–∫—Ç" –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        pro_teaser = "\n\n‚ú® **–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –∞–Ω–∞–ª–∏–∑?**\n" \
                                   "üåü –í Pro: –¥–µ—Ç–∞–ª—å–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã, —ç–∫—Å–ø–æ—Ä—Ç, –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n" \
                                   "üöÄ –ü–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ: /pro"
                    
                    await message.answer(
                        f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!{calendar_status}{pro_teaser}\n\n"
                        "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:\n"
                        "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞\"\n"
                        "‚Ä¢ \"–í–µ—Å –Ω–µ 450–≥, –∞ 300–≥\"\n\n"
                        "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                        parse_mode="Markdown",
                        reply_markup=keyboard
                    )
                else:
                    # Pro/Trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    await message.answer(
                        f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!{calendar_status}\n\n"
                        "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:\n"
                        "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞\"\n"
                        "‚Ä¢ \"–í–µ—Å –Ω–µ 450–≥, –∞ 300–≥\"\n"
                        "‚Ä¢ \"–î–æ–±–∞–≤—å —Ç—É–¥–∞ –µ—â–µ –ø–æ–º–∏–¥–æ—Ä—ã\"\n\n"
                        "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
                        parse_mode="Markdown",
                        reply_markup=keyboard
                    )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            calendar_status = "\nüìÖ **–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar** –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤"
            keyboard = await get_calendar_connect_keyboard(message.from_user.id)
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
            if subscription_type == "lite":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ —Ä–µ–∫–ª–∞–º—É Pro
                daily_count = subscription['daily_photo_count']
                remaining = 5 - daily_count
                
                pro_teaser = ""
                if remaining <= 2:
                    pro_teaser = f"\n\nüåü **–û—Å—Ç–∞–ª–æ—Å—å {remaining} –∞–Ω–∞–ª–∏–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è**\n" \
                               "‚Ä¢ Pro: –¥–æ 200 —Ñ–æ—Ç–æ/–º–µ—Å + –º—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞\n" \
                               "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /pro –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"
                elif daily_count == 1:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–≤–∞—É-—ç—Ñ—Ñ–µ–∫—Ç" –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    pro_teaser = "\n\n‚ú® **–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –∞–Ω–∞–ª–∏–∑?**\n" \
                               "üåü –í Pro: –¥–µ—Ç–∞–ª—å–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã, —ç–∫—Å–ø–æ—Ä—Ç, –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n" \
                               "üöÄ –ü–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ: /pro"
                
                await message.answer(
                    f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!{calendar_status}{pro_teaser}\n\n"
                    "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:\n"
                    "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞\"\n"
                    "‚Ä¢ \"–í–µ—Å –Ω–µ 450–≥, –∞ 300–≥\"\n\n"
                    "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            else:
                # Pro/Trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                await message.answer(
                    f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!{calendar_status}\n\n"
                    "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:\n"
                    "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞\"\n"
                    "‚Ä¢ \"–í–µ—Å –Ω–µ 450–≥, –∞ 300–≥\"\n"
                    "‚Ä¢ \"–î–æ–±–∞–≤—å —Ç—É–¥–∞ –µ—â–µ –ø–æ–º–∏–¥–æ—Ä—ã\"\n\n"
                    "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–µ—Å–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–ï–î –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Ç–µ–∫—Å—Ç–∞)
@router.message(F.text == "üìä –ò—Ç–æ–≥–∏ –¥–Ω—è")
@error_handler
async def daily_summary_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Ç–æ–≥–∏ –¥–Ω—è'"""
    from services.report_service import ReportService
    report_service = ReportService()
    
    try:
        await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å...")
        report = await report_service.generate_daily_report(message.from_user.id)
        await message.answer(report)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üìà –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏")
@error_handler
async def weekly_summary_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ª–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    subscription = await subscription_service.get_user_subscription(message.from_user.id)
    
    if subscription['type'] == 'lite':
        from handlers_payments import show_paywall
        await show_paywall(
            message,
            title="üìà –ü–æ–ª–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ Pro",
            description="Lite: —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å\n\nüåü **Pro** –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç:",
            features=[
                "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é",
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–∏—Ç–∞–Ω–∏—è",
                "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é",
                "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF/CSV",
                "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
            ]
        )
        return
    
    from services.report_service import ReportService
    report_service = ReportService()
    
    try:
        await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é...")
        report = await report_service.generate_weekly_report(message.from_user.id)
        await message.answer(report)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üì∏ –ê–Ω–∞–ª–∏–∑ –µ–¥—ã")
@error_handler
async def food_analysis_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª–∏–∑ –µ–¥—ã'"""
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!\n\n"
        "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Å—Ç–∞–≤, —Ä–∞—Å—Å—á–∏—Ç–∞—é –ö–ë–ñ–£ –∏ –æ–ø—Ä–µ–¥–µ–ª—é –≤–∏—Ç–∞–º–∏–Ω—ã.",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
@error_handler
async def calendar_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    subscription = await subscription_service.get_user_subscription(message.from_user.id)
    
    if subscription['type'] == 'lite':
        from handlers_payments import show_paywall
        await show_paywall(
            message,
            title="üìÖ Google Calendar –≤ Pro",
            description="–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n\nüåü **Pro** –ø–æ–¥–∫–ª—é—á–∞–µ—Ç:",
            features=[
                "‚Ä¢ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
                "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–∏—Ç–∞–Ω–∏—è",
                "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏",
                "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö",
                "‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–∏—Ç–∞–Ω–∏—è"
            ]
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        connected = await calendar_service.ensure_connected(message.from_user.id)
        
        if connected:
            await message.answer(
                "‚úÖ **Google Calendar –ø–æ–¥–∫–ª—é—á–µ–Ω!**\n\n"
                "üìÖ –í—Å–µ –∞–Ω–∞–ª–∏–∑—ã –µ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–∏—Ç–∞–Ω–∏—è.\n"
                "üîó –°–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–∞–≤–µ –∏ –ö–ë–ñ–£.\n\n"
                "üí° **–ö–æ–º–∞–Ω–¥—ã:**\n"
                "‚Ä¢ `/gstatus` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
                "‚Ä¢ `/gdisconnect` - –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
                parse_mode="Markdown",
                reply_markup=get_main_keyboard()
            )
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            try:
                auth_url = await calendar_service.get_auth_url(message.from_user.id)
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar", url=auth_url)]
                ])
                
                await message.answer(
                    "üìÖ **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Calendar**\n\n"
                    "üîó –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –µ–¥—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:\n\n"
                    "‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                await message.answer(
                    "üìÖ **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Calendar**\n\n"
                    "üîó –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –µ–¥—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:\n\n"
                    "1. –ù–∞–∂–º–∏—Ç–µ /gconnect –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
                    "2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Google\n"
                    "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n\n"
                    "‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                    reply_markup=get_main_keyboard()
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

@router.message(F.text == "‚≠ê Pro")
@error_handler
async def pro_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'Pro'"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /pro
    await pro_handler(message)

@router.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
@error_handler
async def status_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—É—Å'"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /status
    await status_handler(message)

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
@error_handler
async def help_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ú–æ–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
/pro - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Pro –ø–æ–¥–ø–∏—Å–∫–µ
/day - –ò—Ç–æ–≥–∏ –¥–Ω—è (–±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø)
/week - –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ (Pro)
/summary - –ò—Ç–æ–≥–∏ –¥–Ω—è
/summary week - –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ (Pro)
/goals - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ (Pro)
/recommendations - –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (Pro)
üìÖ - –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar (Pro)
/gstatus - –°—Ç–∞—Ç—É—Å Google Calendar
/gdisconnect - –û—Ç–∫–ª—é—á–∏—Ç—å Google Calendar

**–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:**
üìä **Lite (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)**: 5 —Ñ–æ—Ç–æ –≤ –¥–µ–Ω—å, –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ö–ë–ñ–£
‚≠ê **Pro (399‚ÇΩ/–º–µ—Å)**: 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü, –º—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞, –≤–∏—Ç–∞–º–∏–Ω—ã, —ç–∫—Å–ø–æ—Ä—Ç, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏
üíé **Pro –ì–æ–¥ (2990‚ÇΩ)**: –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Pro —Å–æ —Å–∫–∏–¥–∫–æ–π 50%

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã
2. üî¢ –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö
3. üìä –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –ö–ë–ñ–£
4. üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å (Pro)
5. ü§ñ –ü–æ–ª—É—á–∞–π—Ç–µ —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (Pro)
6. üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (Pro)

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ –§–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, PNG
‚Ä¢ –í–µ—Å –æ—Ç 1 –¥–æ 5000 –≥—Ä–∞–º–º
‚Ä¢ –õ—é–±—ã–µ –±–ª—é–¥–∞ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã

**–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç:**
‚Ä¢ –°–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏ –∏ –ö–ë–ñ–£
‚Ä¢ –í–∏—Ç–∞–º–∏–Ω—ã –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ (Pro)
‚Ä¢ –ü–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (Pro)

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.
    """
    await message.answer(help_text, parse_mode="Markdown", reply_markup=get_main_keyboard())

@router.message(F.text == "üéØ –¶–µ–ª–∏")
@error_handler
async def goals_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¶–µ–ª–∏'"""
    await goals_handler(message)

@router.message(Command("goals"))
@error_handler
async def goals_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /goals - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
    can_use, message_text = await personal_goals_service.can_use_personal_goals(user_id)
    if not can_use:
        from handlers_payments import show_paywall
        await show_paywall(
            message,
            title="üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –≤ Pro",
            description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!\n\nüåü **Pro** –¥–æ–±–∞–≤–ª—è–µ—Ç:",
            features=[
                "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ (–ø–æ—Ö—É–¥–µ–Ω–∏–µ, –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ)",
                "‚Ä¢ –†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π",
                "‚Ä¢ –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò",
                "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
                "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –ë–ñ–£ –ø–æ–¥ –≤–∞—à—É —Ü–µ–ª—å"
            ]
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
    goal = await personal_goals_service.get_user_goal(user_id)
    
    if goal:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
        goal_type_names = {
            "weight_loss": "üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ",
            "weight_gain": "üìà –ù–∞–±–æ—Ä –≤–µ—Å–∞", 
            "maintenance": "‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞",
            "muscle_gain": "üí™ –ù–∞–±–æ—Ä –º—ã—à—Ü",
            "health_improvement": "üè• –£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"
        }
        
        goal_name = goal_type_names.get(goal['goal_type'], goal['goal_type'])
        daily_calories = goal.get('daily_calories', 2000)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="show_goal_progress")],
            [InlineKeyboardButton(text="ü§ñ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å", callback_data="change_goal")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å", callback_data="delete_goal")]
        ])
        
        await message.answer(
            f"üéØ **–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ª—å**\n\n"
            f"**–¢–∏–ø —Ü–µ–ª–∏:** {goal_name}\n"
            f"**–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π:** {daily_calories} –∫–∫–∞–ª\n"
            f"**–¢–µ–∫—É—â–∏–π –≤–µ—Å:** {goal.get('current_weight', '–Ω–µ —É–∫–∞–∑–∞–Ω')} –∫–≥\n"
            f"**–¶–µ–ª–µ–≤–æ–π –≤–µ—Å:** {goal.get('target_weight', '–Ω–µ —É–∫–∞–∑–∞–Ω')} –∫–≥\n"
            f"**–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:** {goal.get('goal_set_at', {}).strftime('%d.%m.%Y') if goal.get('goal_set_at') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª—å—é!",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="set_goal_weight_loss")],
            [InlineKeyboardButton(text="üìà –ù–∞–±–æ—Ä –≤–µ—Å–∞", callback_data="set_goal_weight_gain")],
            [InlineKeyboardButton(text="‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data="set_goal_maintenance")],
            [InlineKeyboardButton(text="üí™ –ù–∞–±–æ—Ä –º—ã—à—Ü", callback_data="set_goal_muscle_gain")],
            [InlineKeyboardButton(text="üè• –£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è", callback_data="set_goal_health_improvement")]
        ])
        
        await message.answer(
            "üéØ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏**\n\n"
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!\n\n"
            "**–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**\n"
            "‚Ä¢ –†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò\n"
            "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –ë–ñ–£ –ø–æ–¥ –≤–∞—à—É —Ü–µ–ª—å\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

@router.callback_query(F.data.startswith("set_goal_"))
@error_handler
async def set_goal_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏"""
    await callback.answer()
    
    goal_type = callback.data.replace("set_goal_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ü–µ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(goal_type=goal_type)
    await state.set_state(PersonalGoalStates.waiting_for_weight)
    
    await callback.message.edit_text(
        "üéØ **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ü–µ–ª–∏**\n\n"
        f"**–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ü–µ–ª—å:** {goal_type}\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70):",
        parse_mode="Markdown"
    )

@router.message(PersonalGoalStates.waiting_for_weight)
@error_handler
async def goal_weight_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Å–∞ –¥–ª—è —Ü–µ–ª–∏"""
    try:
        weight = float(message.text.strip())
        if weight <= 0 or weight > 300:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –æ—Ç 1 –¥–æ 300 –∫–≥")
            return
        
        await state.update_data(current_weight=weight)
        await state.set_state(PersonalGoalStates.waiting_for_height)
        
        await message.answer(
            "‚úÖ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):"
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70)")

@router.message(PersonalGoalStates.waiting_for_height)
@error_handler
async def goal_height_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–æ—Å—Ç–∞ –¥–ª—è —Ü–µ–ª–∏"""
    try:
        height = float(message.text.strip())
        if height <= 0 or height > 250:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –æ—Ç 1 –¥–æ 250 —Å–º")
            return
        
        await state.update_data(height=height)
        await state.set_state(PersonalGoalStates.waiting_for_age)
        
        await message.answer(
            "‚úÖ –†–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25):"
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175)")

@router.message(PersonalGoalStates.waiting_for_age)
@error_handler
async def goal_age_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è —Ü–µ–ª–∏"""
    try:
        age = int(message.text.strip())
        if age <= 0 or age > 120:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 1 –¥–æ 120 –ª–µ—Ç")
            return
        
        await state.update_data(age=age)
        await state.set_state(PersonalGoalStates.waiting_for_activity)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõãÔ∏è –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π", callback_data="activity_sedentary")],
            [InlineKeyboardButton(text="üö∂ –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="activity_light")],
            [InlineKeyboardButton(text="üèÉ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="activity_moderate")],
            [InlineKeyboardButton(text="üí™ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="activity_active")],
            [InlineKeyboardButton(text="üî• –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è", callback_data="activity_very_active")]
        ])
        
        await message.answer(
            "‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            reply_markup=keyboard
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25)")

@router.callback_query(F.data.startswith("activity_"))
@error_handler
async def goal_activity_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    await callback.answer()
    
    activity_map = {
        "activity_sedentary": "sedentary",
        "activity_light": "light", 
        "activity_moderate": "moderate",
        "activity_active": "active",
        "activity_very_active": "very_active"
    }
    
    activity_level = activity_map[callback.data]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å
    success = await personal_goals_service.set_user_goal(
        user_id=callback.from_user.id,
        goal_type=data['goal_type'],
        current_weight=data['current_weight'],
        height=data['height'],
        age=data['age'],
        activity_level=activity_level
    )
    
    if success:
        goal = await personal_goals_service.get_user_goal(callback.from_user.id)
        daily_calories = goal.get('daily_calories', 2000)
        
        await callback.message.edit_text(
            f"üéâ **–¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
            f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\n"
            f"üìä –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_calories} –∫–∫–∞–ª\n\n"
            f"ü§ñ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!\n"
            f"üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –µ–¥—É –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º!",
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /goals"
        )
    
    await state.clear()

@router.message(Command("recommendations"))
@error_handler
async def recommendations_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recommendations - —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
    can_use, message_text = await personal_goals_service.can_use_personal_goals(user_id)
    if not can_use:
        from handlers_payments import show_paywall
        await show_paywall(
            message,
            title="ü§ñ –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ Pro",
            description="–ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é!\n\nüåü **Pro** –≤–∫–ª—é—á–∞–µ—Ç:",
            features=[
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è",
                "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–¥ –≤–∞—à—É —Ü–µ–ª—å",
                "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –ë–ñ–£",
                "‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            ]
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
    today = datetime.now().strftime('%Y-%m-%d')
    analyses = await firebase_service.get_daily_analyses(user_id, today)
    
    if not analyses:
        await message.answer(
            "üìä **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è**\n\n"
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –±–ª—é–¥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!",
            parse_mode="Markdown"
        )
        return
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–∏—Ç–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
    daily_nutrition = await firebase_service.aggregate_daily_nutrition(analyses)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    await message.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    recommendations = await personal_goals_service.generate_smart_recommendations(
        user_id, daily_nutrition
    )
    
    await message.answer(recommendations, parse_mode="Markdown")

@router.message(Command("export"))
@error_handler
async def export_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export - —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
    can_export, message_text = await export_service.can_use_export(user_id)
    if not can_export:
        from handlers_payments import show_paywall
        await show_paywall(
            message,
            title="üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ Pro",
            description="–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏ –¥–µ–ª–∏—Ç–µ—Å—å –æ—Ç—á–µ—Ç–∞–º–∏!\n\nüåü **Pro** –≤–∫–ª—é—á–∞–µ—Ç:",
            features=[
                "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV (—Ç–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö)",
                "‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–µ PDF –æ—Ç—á–µ—Ç—ã",
                "‚Ä¢ –°—Å—ã–ª–∫–∏ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ —Å –≤—Ä–∞—á–æ–º/—Ç—Ä–µ–Ω–µ—Ä–æ–º",
                "‚Ä¢ –û—Ç—á–µ—Ç—ã –∑–∞ –ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥"
            ]
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_options = await export_service.get_export_options(user_id)
    
    if not export_options["available"]:
        await message.answer(f"‚ùå {export_options['message']}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    keyboard_buttons = []
    for option in export_options["options"]:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"{option['icon']} {option['name']}",
                callback_data=f"export_{option['type']}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_export")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.answer(
        "üìä **–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:\n\n"
        "üìä **CSV** - —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è Excel\n"
        "üìÑ **PDF** - –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏\n"
        "üîó **–ü–æ–¥–µ–ª–∏—Ç—å—Å—è** - —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ä–∞—á—É/—Ç—Ä–µ–Ω–µ—Ä—É",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("export_"))
@error_handler
async def export_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ callback"""
    await callback.answer()
    
    export_type = callback.data.replace("export_", "")
    user_id = callback.from_user.id
    
    if export_type == "csv":
        await callback.message.edit_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é CSV —Ñ–∞–π–ª...")
        
        csv_data = await export_service.generate_csv_report(user_id, 7)
        
        if csv_data:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
            from aiogram.types import BufferedInputFile
            
            csv_content = csv_data.getvalue()
            csv_file = BufferedInputFile(
                csv_content.encode('utf-8'),
                filename=f"nutrition_report_{datetime.now().strftime('%Y%m%d')}.csv"
            )
            
            await callback.message.answer_document(
                document=csv_file,
                caption="üìä **CSV –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!**\n\n"
                       "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.\n"
                       "–ú–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤ Excel –∏–ª–∏ Google Sheets.",
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    elif export_type == "pdf":
        await callback.message.edit_text("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –æ—Ç—á–µ—Ç...")
        
        pdf_data = await export_service.generate_pdf_report(user_id, 7)
        
        if pdf_data:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
            from aiogram.types import BufferedInputFile
            
            pdf_file = BufferedInputFile(
                pdf_data,
                filename=f"nutrition_report_{datetime.now().strftime('%Y%m%d')}.html"
            )
            
            await callback.message.answer_document(
                document=pdf_file,
                caption="üìÑ **PDF –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!**\n\n"
                       "–ö—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.\n"
                       "–ú–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–∞—á—É/—Ç—Ä–µ–Ω–µ—Ä—É.",
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    elif export_type == "share":
        await callback.message.edit_text("üîó –°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞...")
        
        share_link = await export_service.generate_shareable_link(user_id, "weekly")
        
        if share_link:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç", url=share_link)],
                [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share_report")]
            ])
            
            await callback.message.edit_text(
                f"üîó **–°—Å—ã–ª–∫–∞ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –≥–æ—Ç–æ–≤–∞!**\n\n"
                f"**–°—Å—ã–ª–∫–∞:** {share_link}\n\n"
                f"üì§ –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É:\n"
                f"‚Ä¢ –í—Ä–∞—á—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
                f"‚Ä¢ –¢—Ä–µ–Ω–µ—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è\n"
                f"‚Ä¢ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥—É –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n"
                f"üí° –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –¥–Ω–µ–π",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

@router.callback_query(F.data == "cancel_export")
@error_handler
async def cancel_export_handler(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚ùå **–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
        "–ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç–∫—Å–ø–æ—Ä—Ç—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /export",
        parse_mode="Markdown"
    )

@router.message(Command("status"))
@error_handler
async def status_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    user_subscription = await subscription_service.get_user_subscription(user_id)
    subscription_type = user_subscription.get('type', 'lite') if user_subscription else 'lite'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    user_data = await firebase_service.get_user_info(user_id)
    trial_used = user_data.get('trial_used', False) if user_data else False
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if subscription_type == 'lite':
        daily_count = await subscription_service.get_daily_photo_count(user_id)
        remaining_daily = 5 - daily_count
        
        status_text = f"""
üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏**

üéØ **–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:** Lite (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
‚è≥ **–û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è:** {remaining_daily} –∞–Ω–∞–ª–∏–∑–æ–≤
üìÖ **–°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞:** –∑–∞–≤—Ç—Ä–∞ –≤ 00:00

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚úÖ –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ö–ë–ñ–£
‚úÖ –ö—Ä–∞—Ç–∫–∏–π –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
‚úÖ –ò—Å—Ç–æ—Ä–∏—è 7 –¥–Ω–µ–π
‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚ùå –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞
‚ùå –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã
‚ùå –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF/CSV
‚ùå Google Calendar –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
‚ùå –ù–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

üí° **–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ?** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pro
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª
        if not trial_used:
            keyboard_buttons.append([InlineKeyboardButton(text="‚≠ê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Pro –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="start_pro_trial")])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å Pro (399‚ÇΩ/–º–µ—Å)", callback_data="buy_pro_monthly")],
            [InlineKeyboardButton(text="üèÜ Pro –ì–æ–¥ (2990‚ÇΩ, -50%)", callback_data="buy_pro_annual")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
    elif subscription_type == 'trial':
        end_date = user_subscription.get('end_date')
        daily_count = await subscription_service.get_daily_photo_count(user_id)
        monthly_count = await subscription_service.get_monthly_photo_count(user_id)
        
        status_text = f"""
‚≠ê **–í–∞—à —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏**

üéØ **–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:** Pro Trial (7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
üìÖ **–ò—Å—Ç–µ–∫–∞–µ—Ç:** {end_date.strftime('%d.%m.%Y %H:%M') if end_date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ –º–µ—Å—è—Ü–µ:** {monthly_count}/200 –∞–Ω–∞–ª–∏–∑–æ–≤

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚úÖ –î–æ 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü
‚úÖ –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞
‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã + —Å–æ–≤–µ—Ç—ã
‚úÖ Google Calendar –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF/CSV
‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å

üöÄ **–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É** –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç—Ä–∏–∞–ª–∞!
        """
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíé –ü—Ä–æ–¥–ª–∏—Ç—å Pro (399‚ÇΩ/–º–µ—Å)", callback_data="buy_pro_monthly")],
            [InlineKeyboardButton(text="üèÜ Pro –ì–æ–¥ (2990‚ÇΩ, -50%)", callback_data="buy_pro_annual")]
        ])
        
    elif subscription_type == 'pro':
        end_date = user_subscription.get('end_date')
        daily_count = await subscription_service.get_daily_photo_count(user_id)
        monthly_count = await subscription_service.get_monthly_photo_count(user_id)
        
        status_text = f"""
‚≠ê **–í–∞—à —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏**

üéØ **–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:** Pro
üìÖ **–ê–∫—Ç–∏–≤–µ–Ω –¥–æ:** {end_date.strftime('%d.%m.%Y %H:%M') if end_date else '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}
üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ –º–µ—Å—è—Ü–µ:** {monthly_count}/200 –∞–Ω–∞–ª–∏–∑–æ–≤

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚úÖ –î–æ 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü
‚úÖ –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞
‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã + —Å–æ–≤–µ—Ç—ã
‚úÖ Google Calendar –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF/CSV
‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å

üéâ **–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Pro!**
        """
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíé –ü—Ä–æ–¥–ª–∏—Ç—å Pro (399‚ÇΩ/–º–µ—Å)", callback_data="buy_pro_monthly")],
            [InlineKeyboardButton(text="üèÜ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Pro –ì–æ–¥ (-50%)", callback_data="buy_pro_annual")]
        ])
    
    else:
        status_text = """
‚ùì **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω**

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
        """
        keyboard = None
    
    await message.answer(status_text, parse_mode="Markdown", reply_markup=keyboard)

@router.message(Command("pro"))
@error_handler
async def pro_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pro - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Pro –ø–æ–¥–ø–∏—Å–∫–µ"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscription = await subscription_service.get_user_subscription(user_id)
    subscription_type = subscription.get('type', 'lite') if subscription else 'lite'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    user_data = await firebase_service.get_user_info(user_id)
    trial_used = user_data.get('trial_used', False) if user_data else False
    
    pro_text = """
‚≠ê **Pro –ø–æ–¥–ø–∏—Å–∫–∞ - –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞**

üéØ **–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ Pro:**
‚úÖ –î–æ 200 —Ñ–æ—Ç–æ –≤ –º–µ—Å—è—Ü (vs 5 –≤ –¥–µ–Ω—å –≤ Lite)
‚úÖ –ú—É–ª—å—Ç–∏-—Ç–∞—Ä–µ–ª–∫–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥ –Ω–∞ —Ñ–æ—Ç–æ)
‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
‚úÖ –£–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é
‚úÖ –ü–æ–ª–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é
‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF –∏ CSV
‚úÖ Google Calendar –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è

üí∞ **–¢–∞—Ä–∏—Ñ—ã:**
üíé **Pro –ú–µ—Å—è—Ü:** 399‚ÇΩ/–º–µ—Å—è—Ü
üèÜ **Pro –ì–æ–¥:** 2990‚ÇΩ/–≥–æ–¥ (—Å–∫–∏–¥–∫–∞ 50%!)
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª
    if subscription_type != 'trial' and not trial_used:
        pro_text += "‚≠ê **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:** 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
    
    pro_text += "üöÄ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**"
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª
    if subscription_type != 'trial' and not trial_used:
        keyboard_buttons.append([InlineKeyboardButton(text="‚≠ê 7 –¥–Ω–µ–π Pro –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="start_pro_trial")])
    
    keyboard_buttons.extend([
        [InlineKeyboardButton(text="üíé Pro –ú–µ—Å—è—Ü (399‚ÇΩ)", callback_data="buy_pro_monthly")],
        [InlineKeyboardButton(text="üèÜ Pro –ì–æ–¥ (2990‚ÇΩ, -50%)", callback_data="buy_pro_annual")],
        [InlineKeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="show_status")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.answer(pro_text, parse_mode="Markdown", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–ï–î –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Ç–µ–∫—Å—Ç–∞
@router.message(Command("day"))
@error_handler
async def day_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /day - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏—Ç–æ–≥–∞–º –¥–Ω—è"""
    from services.report_service import ReportService
    report_service = ReportService()
    
    try:
        await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å...")
        report = await report_service.generate_daily_report(message.from_user.id)
        await message.answer(report, reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())

@router.message(Command("week"))
@error_handler
async def week_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /week - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏—Ç–æ–≥–∞–º –Ω–µ–¥–µ–ª–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ª–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    subscription = await subscription_service.get_user_subscription(message.from_user.id)
    
    if subscription['type'] == 'lite':
        from handlers_payments import show_paywall
        await show_paywall(
            message,
            title="üìà –ö–æ–º–∞–Ω–¥–∞ /week –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ Pro",
            description="–í Lite –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n\nüåü **Pro** —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç:",
            features=[
                "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã /week –∏ /summary week",
                "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥",
                "‚Ä¢ –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
                "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
            ]
        )
        return
    
    from services.report_service import ReportService
    report_service = ReportService()
    
    try:
        await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é...")
        report = await report_service.generate_weekly_report(message.from_user.id)
        await message.answer(report, reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())

@router.message(Command("summary"))
@error_handler
async def summary_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /summary - —Å–≤–æ–¥–∫–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    command_args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    if 'week' in command_args:
        subscription = await subscription_service.get_user_subscription(message.from_user.id)
        if subscription['type'] == 'lite':
            from handlers_payments import show_paywall
            await show_paywall(
                message,
                title="üìä /summary week –≤ Pro",
                description="–í Lite: —Ç–æ–ª—å–∫–æ /summary (–¥–µ–Ω—å)\n\nüåü **Pro** –¥–æ–±–∞–≤–ª—è–µ—Ç:",
                features=[
                    "‚Ä¢ /summary week - –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞",
                    "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤",
                    "‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏",
                    "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é"
                ]
            )
            return
    
    from services.report_service import ReportService
    report_service = ReportService()
    
    try:
        if 'week' in command_args:
            await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é...")
            report = await report_service.generate_weekly_report(message.from_user.id)
        else:
            await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å...")
            report = await report_service.generate_daily_report(message.from_user.id)
        
        await message.answer(report, reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())

@router.message(Command("gconnect"))
@error_handler
async def gconnect_handler(message: Message):
    """–°—Ç–∞—Ä—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Calendar"""
    try:
        auth_url = await calendar_service.get_auth_url(message.from_user.id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar", url=auth_url)]
        ])
        
        await message.answer(
            "üìÖ **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Calendar**\n\n"
            "üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é:\n\n"
            "‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã –µ–¥—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å!",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("gstatus"))
@error_handler
async def gstatus_handler(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Calendar"""
    try:
        connected = await calendar_service.ensure_connected(message.from_user.id)
        if connected:
            await message.answer("‚úÖ Google Calendar –ø–æ–¥–∫–ª—é—á–µ–Ω. –°–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–∏—Ç–∞–Ω–∏—è.")
        else:
            keyboard = await get_calendar_connect_keyboard(message.from_user.id)
            await message.answer(
                "‚ö†Ô∏è **Google Calendar –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω**\n\n"
                "üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text)
@error_handler
async def text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–∞–≤–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if analysis_storage.has_recent_analysis(user_id):
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑
        last_analysis = analysis_storage.get_last_analysis(user_id)
        
        if last_analysis:
            await message.answer("üîÑ –ò—Å–ø—Ä–∞–≤–ª—è—é –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –∑–∞–º–µ—á–∞–Ω–∏–π...")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Gemini
            corrected_analysis = await gemini_service.correct_analysis(
                original_analysis=last_analysis['analysis_text'],
                user_correction=message.text
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            analysis_storage.update_analysis(user_id, corrected_analysis)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            formatted_response = format_nutrition_info(corrected_analysis)
            weight_info = f" ({last_analysis['weight']} –≥)" if last_analysis['weight'] else " (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞)"
            final_response = f"üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑{weight_info}:\n\n{formatted_response}"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar
            try:
                if calendar_service:
                    title = extract_meal_title(corrected_analysis)
                    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å event_id –≤ analysis_storage
                    await calendar_service.update_latest_meal_event(
                        user_id=user_id,
                        title=title,
                        description=formatted_response
                    )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
            await message.answer(final_response)
            
            await message.answer(
                "‚úÖ –ê–Ω–∞–ª–∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                "üí¨ –ù—É–∂–Ω—ã –µ—â–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n"
                "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )
            return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–∏–º–∏—Ç–æ–≤
    user_subscription = await subscription_service.get_user_subscription(user_id)
    subscription_type = user_subscription.get('type', 'lite') if user_subscription else 'lite'
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
    if subscription_type == 'lite':
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–∞ –¥–µ–Ω—å
        daily_count = await subscription_service.get_daily_photo_count(user_id)
        remaining = 5 - daily_count
        if remaining > 0:
            limit_info = f"üìä **Lite**: –û—Å—Ç–∞–ª–æ—Å—å {remaining} –∞–Ω–∞–ª–∏–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è (–∏–∑ 5)"
        else:
            limit_info = f"üìä **Lite**: –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω ({daily_count}/5 —Ñ–æ—Ç–æ)\n‚è∞ –°–±—Ä–æ—Å–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 00:00"
    elif subscription_type in ['trial', 'pro']:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–∞ –º–µ—Å—è—Ü
        monthly_count = await subscription_service.get_monthly_photo_count(user_id)
        remaining = 200 - monthly_count
        limit_info = f"‚≠ê **Pro**: –û—Å—Ç–∞–ª–æ—Å—å {remaining} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü–µ (–∏–∑ 200)"
    else:
        limit_info = "üìä **Lite**: 5 —Ñ–æ—Ç–æ –≤ –¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
    keyboard = None
    if subscription_type == 'lite':
        daily_count = await subscription_service.get_daily_photo_count(user_id)
        if daily_count >= 5:
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üåü –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Pro", callback_data="show_paywall")]
            ])
    
    await message.answer(
        f"üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!\n\n"
        f"{limit_info}\n\n"
        "üí° –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:\n"
        "‚Ä¢ \"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä—É–∫–∫–æ–ª–∞, –∞ —à–ø–∏–Ω–∞—Ç\"\n"
        "‚Ä¢ \"–í–µ—Å –Ω–µ 300–≥, –∞ 250–≥\"\n"
        "‚Ä¢ \"–î–æ–±–∞–≤—å —Ç—É–¥–∞ –º–æ—Ä–∫–æ–≤—å\"",
        reply_markup=keyboard
    )

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    from commands import commands_router
    from handlers_payments import payments_router
    dp.include_router(router)
    dp.include_router(payments_router)
    dp.include_router(commands_router)
